{"mappings":"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","sources":["particles/params.ts","particles/particle.ts","particles/simulation.ts","particles/sketch.ts"],"sourcesContent":["class Params {\n    particleSize = 5;\n    lineMaxDist = 150;\n    WallThickness = 0;\n    WallBuffer = 50;\n    InitialPopulation = 160;\n    MaxSpeed = 5;\n    MinSpeed = 0.5;\n    MaxForce = 0.2;\n}\nconst params = new Params();\nexport default params;\n","import P5 from 'p5';\nimport params from './params';\nexport default class Particle {\n    mass: number;\n    color: P5.Color;\n    position: P5.Vector;\n    velocity: P5.Vector;\n    size: number;\n    heading: number;\n    p5: P5;\n    constructor(p5: P5) {\n        this.p5 = p5;\n        this.position = this.p5.createVector(\n            Math.random() * p5.windowWidth,\n            Math.random() * p5.windowHeight\n        );\n        this.heading = Math.random() * 2 * this.p5.PI;\n        this.velocity = this.p5\n            .createVector(this.p5.cos(this.heading), this.p5.sin(this.heading))\n            .normalize()\n            .mult(params.MaxSpeed * Math.random());\n        this.color = this.p5.color(\n            Math.random() * 255,\n            Math.random() * 255,\n            Math.random() * 255\n        );\n        this.size = 5;\n        this.mass = 1;\n    }\n\n    draw() {\n        this.p5.push();\n        this.p5.translate(this.position.x, this.position.y);\n        this.p5.fill(this.color);\n        this.p5.ellipse(0, 0, this.size, this.size);\n        this.p5.fill(0, 0, 0);\n        this.p5.pop();\n    }\n\n    step(force: P5.Vector) {\n        var acceleration = P5.Vector.mult(force, this.mass);\n        this.velocity.add(acceleration);\n        if (this.velocity.mag() < params.MinSpeed) {\n            this.velocity.normalize();\n            this.velocity.mult(params.MinSpeed);\n        }\n        this.velocity.limit(params.MaxSpeed);\n        this.position.add(this.velocity);\n        this.warpWorld();\n    }\n\n    warpWorld() {\n        var wx = this.p5.windowWidth;\n        var wy = this.p5.windowHeight;\n        var b = params.WallBuffer;\n        if (this.position.x < b) {\n            this.position.x = wx - 1.1 * b;\n        } else if (this.position.x > wx - b) {\n            this.position.x = 1.1 * b;\n        }\n\n        if (this.position.y < b) {\n            this.position.y = wy - 1.1 * b;\n        } else if (this.position.y > wy - b) {\n            this.position.y = 1.1 * b;\n        }\n    }\n\n    getDistanceFrom(target: P5.Vector) {\n        var distance = P5.Vector.dist(this.position, target);\n        var p2 = this.p5.createVector(target.x, target.y);\n\n        if (\n            this.position.y < params.WallBuffer ||\n            this.position.y > this.p5.windowHeight - params.WallBuffer\n        ) {\n            // Toroidal warping\n            p2.y = -target.y + this.p5.windowHeight - params.WallBuffer;\n        }\n\n        if (\n            this.position.x < params.WallBuffer ||\n            this.position.x > this.p5.windowWidth - params.WallBuffer\n        ) {\n            // Toroidal warping\n            p2.x = -target.x + this.p5.windowWidth - params.WallBuffer;\n        }\n\n        var distance2 = P5.Vector.dist(this.position, p2);\n        distance = this.p5.min(distance, distance2);\n        return distance;\n    }\n}\n","import P5 from 'p5';\nimport params from './params';\nimport Particle from './particle';\nexport default class Simulation {\n    particles: Array<Particle> = [];\n    p5: P5;\n\n    constructor(p5: P5) {\n        this.p5 = p5;\n    }\n\n    run() {\n        this.particles.forEach((particle) => {\n            // Draw things\n            particle.draw();\n            this.drawLines(particle, this.particles);\n\n            // apply physics\n            // Here, every particle gets hit by some random force\n            let heading = Math.random() * 2 * this.p5.PI;\n            let force = this.p5\n                .createVector(this.p5.cos(heading), this.p5.sin(heading))\n                .normalize()\n                .mult(0.1 * params.MaxSpeed * Math.random());\n            particle.step(force);\n        });\n    }\n\n    drawLines(particle: Particle, particles: Array<Particle>) {\n        particles.forEach((otherParticle) => {\n            let d = P5.Vector.dist(otherParticle.position, particle.position);\n            if (d < params.lineMaxDist) {\n                this.p5.stroke(\n                    this.p5.color(\n                        0,\n                        255,\n                        0,\n                        this.p5.map(d, 0, params.lineMaxDist, 255, 0)\n                    )\n                );\n                this.p5.strokeWeight(\n                    this.p5.map(d, 0, params.lineMaxDist, 2, 0)\n                );\n                this.p5.line(\n                    particle.position.x,\n                    particle.position.y,\n                    otherParticle.position.x,\n                    otherParticle.position.y\n                );\n            }\n        });\n    }\n\n    addNewParticle() {\n        let particle = new Particle(this.p5);\n        particle.size = params.particleSize;\n        this.particles.push(particle);\n    }\n}\n","import P5 from 'p5';\nimport params from './params';\nimport Simulation from './simulation';\n\nconst sketch = (p5: P5) => {\n    var is_canvas_infocus = false;\n    var simulation = new Simulation(p5);\n\n    p5.setup = () => {\n        var cnv = p5.createCanvas(p5.windowWidth, p5.windowHeight);\n        cnv.mouseOver(() => {\n            is_canvas_infocus = true;\n        });\n        cnv.mouseOut(() => {\n            is_canvas_infocus = false;\n        });\n        cnv.style('display', 'block');\n        cnv.parent('sketch-holder');\n        for (let i = 0; i < params.InitialPopulation; i++) {\n            simulation.addNewParticle();\n        }\n    };\n\n    p5.windowResized = () => {\n        p5.resizeCanvas(p5.windowWidth * 0.9, p5.windowHeight * 0.9);\n    };\n\n    p5.draw = () => {\n        p5.background(20, 20, 0);\n        simulation.run();\n    };\n};\n\nnew P5(sketch);\n"],"names":["$8850ff8f2cf55c55$export$2e2bcd8739ae039","this","particleSize","lineMaxDist","WallThickness","WallBuffer","InitialPopulation","MaxSpeed","MinSpeed","MaxForce","$c7e093eee7f53d61$export$2e2bcd8739ae039","p5","position","createVector","Math","random","windowWidth","windowHeight","heading","PI","velocity","cos","sin","normalize","mult","color","size","mass","draw","push","translate","x","y","fill","ellipse","pop","step","force","acceleration","$parcel$interopDefault","$7Pz0b","Vector","add","mag","limit","warpWorld","wx","wy","b","getDistanceFrom","target","distance","dist","p2","distance2","min","$6dd4b2c6c313b40c$export$2e2bcd8739ae039","particles","run","forEach","particle","drawLines","otherParticle","d","stroke","map","strokeWeight","line","addNewParticle","simulation","setup","cnv","createCanvas","mouseOver","mouseOut","style","parent","i","windowResized","resizeCanvas","background"],"version":3,"file":"index.82826c66.js.map"}