{"mappings":"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","sources":["<anon>","game-of-life/sketch.ts"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire5b7a\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire5b7a\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\nvar $7Pz0b = parcelRequire(\"7Pz0b\");\nconst $00608afa285c91e9$var$sketch = (p5)=>{\n    var is_canvas_infocus = false;\n    const game = new $00608afa285c91e9$var$GameOfLife();\n    p5.setup = ()=>{\n        var cnv = p5.createCanvas(p5.windowWidth * 0.9, p5.windowHeight * 0.9);\n        cnv.mouseOver(()=>{\n            is_canvas_infocus = true;\n        });\n        cnv.mouseOut(()=>{\n            is_canvas_infocus = false;\n        });\n        cnv.style(\"display\", \"block\");\n        cnv.parent(\"sketch-holder\");\n    };\n    p5.windowResized = ()=>{\n        p5.resizeCanvas(p5.windowWidth * 0.9, p5.windowHeight * 0.9);\n    };\n    p5.draw = ()=>{\n        p5.background(0, 0, 0);\n        drawCells(game);\n        if (p5.frameCount % 2 == 0) game.simulateLife();\n    };\n    function drawCells(game) {\n        let cells = game.cells;\n        const cellXWidth = p5.max(p5.width / game.gridXSize, 1);\n        const cellYWidth = p5.max(p5.height / game.gridYSize, 1);\n        for(var i = 0; i < game.gridXSize; i++){\n            for(var j = 0; j < game.gridYSize; j++)if (game.cells[i][j] == 1) {\n                const num_neighbors = game.retrieveLiveNeighbors(i, j);\n                p5.fill(100 * num_neighbors * Math.random(), 100 * num_neighbors * Math.random(), 100 * num_neighbors * Math.random());\n                p5.strokeWeight(0);\n                p5.rect(i * cellXWidth, j * cellYWidth, cellXWidth, cellYWidth);\n            }\n        }\n    }\n};\nclass $00608afa285c91e9$var$GameOfLife {\n    constructor(){\n        this.gridXSize = 300;\n        this.gridYSize = 300;\n        this.cells = [];\n        for(var i = 0; i < this.gridXSize; i++){\n            var arr = [\n                0\n            ];\n            for(var j = 0; j < this.gridYSize; j++)arr.push(0);\n            this.cells.push(arr);\n        }\n        this.randomizeWorld();\n    }\n    randomizeWorld() {\n        for(var i = 0; i < this.gridXSize; i++)for(var j = 0; j < this.gridYSize; j++){\n            this.cells[i][j] = 0;\n            if (Math.random() < 0.1) this.cells[i][j] = 1;\n        }\n    }\n    retrieveLiveNeighbors(X, Y) {\n        var count = 0;\n        for(var i = -1; i < 2; i++)for(var j = -1; j < 2; j++){\n            if (i == 0 && j == 0) continue;\n            // This is to ensure the world wraps around corners\n            const x = (this.gridXSize + X + i) % this.gridXSize;\n            const y = (this.gridYSize + Y + j) % this.gridYSize;\n            count += this.cells[x][y];\n        }\n        return count;\n    }\n    simulateLife() {\n        // Simulates the life according to Conway's Four rules\n        const neighbors = [];\n        for(var i = 0; i < this.gridXSize; i++){\n            neighbors.push([]);\n            for(var j = 0; j < this.gridYSize; j++)neighbors[i].push(this.retrieveLiveNeighbors(i, j));\n        }\n        for(var i = 0; i < this.gridXSize; i++)for(var j = 0; j < this.gridYSize; j++){\n            const k = neighbors[i][j];\n            if (this.cells[i][j] == 1) {\n                if (k < 2) // Rule 1\n                // Any live cell with fewer than two live neighbors dies, as if by underpopulation.\n                this.cells[i][j] = 0;\n                if (k == 2 || k == 3) // Rule 2\n                // Any live cell with two or three live neighbors lives on to the next generation.\n                this.cells[i][j] = 1;\n                if (k > 3) // Rule 3\n                // Any live cell with more than three live neighbors dies, as if by overpopulation.\n                this.cells[i][j] = 0;\n            } else if (k == 3) // Rule 4\n            // Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.\n            this.cells[i][j] = 1;\n        }\n    }\n}\nnew (0, (/*@__PURE__*/$parcel$interopDefault($7Pz0b)))($00608afa285c91e9$var$sketch);\n\n\n//# sourceMappingURL=index.06da461b.js.map\n","import P5 from 'p5';\n\nconst sketch = (p5: P5) => {\n    var is_canvas_infocus = false;\n    const game = new GameOfLife();\n    p5.setup = () => {\n        var cnv = p5.createCanvas(p5.windowWidth * 0.9, p5.windowHeight * 0.9);\n        cnv.mouseOver(() => {\n            is_canvas_infocus = true;\n        });\n        cnv.mouseOut(() => {\n            is_canvas_infocus = false;\n        });\n        cnv.style('display', 'block');\n        cnv.parent('sketch-holder');\n    };\n\n    p5.windowResized = () => {\n        p5.resizeCanvas(p5.windowWidth * 0.9, p5.windowHeight * 0.9);\n    };\n\n    p5.draw = () => {\n        p5.background(0, 0, 0);\n        drawCells(game);\n        if (p5.frameCount % 2 == 0) {\n            game.simulateLife();\n        }\n    };\n\n    function drawCells(game: GameOfLife) {\n        let cells = game.cells;\n        const cellXWidth = p5.max(p5.width / game.gridXSize, 1);\n        const cellYWidth = p5.max(p5.height / game.gridYSize, 1);\n        for (var i = 0; i < game.gridXSize; i++) {\n            for (var j = 0; j < game.gridYSize; j++) {\n                if (game.cells[i][j] == 1) {\n                    const num_neighbors = game.retrieveLiveNeighbors(i, j);\n                    p5.fill(\n                        100 * num_neighbors * Math.random(),\n                        100 * num_neighbors * Math.random(),\n                        100 * num_neighbors * Math.random()\n                    );\n                    p5.strokeWeight(0);\n                    p5.rect(\n                        i * cellXWidth,\n                        j * cellYWidth,\n                        cellXWidth,\n                        cellYWidth\n                    );\n                }\n            }\n        }\n    }\n};\n\nclass GameOfLife {\n    gridXSize = 300;\n    gridYSize = 300;\n    cells = [];\n\n    constructor() {\n        for (var i = 0; i < this.gridXSize; i++) {\n            var arr = [0];\n            for (var j = 0; j < this.gridYSize; j++) arr.push(0);\n            this.cells.push(arr);\n        }\n        this.randomizeWorld();\n    }\n\n    randomizeWorld() {\n        for (var i = 0; i < this.gridXSize; i++) {\n            for (var j = 0; j < this.gridYSize; j++) {\n                this.cells[i][j] = 0;\n                if (Math.random() < 0.1) {\n                    this.cells[i][j] = 1;\n                }\n            }\n        }\n    }\n\n    retrieveLiveNeighbors(X, Y) {\n        var count = 0;\n        for (var i = -1; i < 2; i++) {\n            for (var j = -1; j < 2; j++) {\n                if (i == 0 && j == 0) {\n                    continue;\n                }\n                // This is to ensure the world wraps around corners\n                const x = (this.gridXSize + X + i) % this.gridXSize;\n                const y = (this.gridYSize + Y + j) % this.gridYSize;\n                count += this.cells[x][y];\n            }\n        }\n        return count;\n    }\n\n    simulateLife() {\n        // Simulates the life according to Conway's Four rules\n        const neighbors = [];\n        for (var i = 0; i < this.gridXSize; i++) {\n            neighbors.push([]);\n            for (var j = 0; j < this.gridYSize; j++) {\n                neighbors[i].push(this.retrieveLiveNeighbors(i, j));\n            }\n        }\n        for (var i = 0; i < this.gridXSize; i++) {\n            for (var j = 0; j < this.gridYSize; j++) {\n                const k = neighbors[i][j];\n                if (this.cells[i][j] == 1) {\n                    if (k < 2) {\n                        // Rule 1\n                        // Any live cell with fewer than two live neighbors dies, as if by underpopulation.\n                        this.cells[i][j] = 0;\n                    }\n                    if (k == 2 || k == 3) {\n                        // Rule 2\n                        // Any live cell with two or three live neighbors lives on to the next generation.\n                        this.cells[i][j] = 1;\n                    }\n                    if (k > 3) {\n                        // Rule 3\n                        // Any live cell with more than three live neighbors dies, as if by overpopulation.\n                        this.cells[i][j] = 0;\n                    }\n                } else {\n                    if (k == 3) {\n                        // Rule 4\n                        // Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.\n                        this.cells[i][j] = 1;\n                    }\n                }\n            }\n        }\n\n    }\n}\n\nnew P5(sketch);\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$7Pz0b","$00608afa285c91e9$var$GameOfLife","constructor","gridXSize","gridYSize","cells","i","arr","j","push","randomizeWorld","Math","random","retrieveLiveNeighbors","X","Y","count","x","y","simulateLife","neighbors","k","a","__esModule","default","p5","game","setup","cnv","createCanvas","windowWidth","windowHeight","mouseOver","mouseOut","style","parent","windowResized","resizeCanvas","draw","background","drawCells","cellXWidth","max","width","cellYWidth","height","num_neighbors","fill","strokeWeight","rect","frameCount"],"version":3,"file":"index.06da461b.js.map"}