{"mappings":"A,S,E,C,E,O,G,E,U,C,E,O,C,C,C,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,E,Q,C,I,E,E,S,E,E,S,E,E,S,E,E,QGEO,OAAM,EAcT,YAAY,CAAuB,CAAE,CAbrC,IAAA,CAAA,IAAA,CAAO,EACP,IAAA,CAAA,QAAA,CAAW,IACX,IAAA,CAAA,SAAA,CAAY,CAAA,EAEZ,IAAA,CAAA,YAAA,CAA8B,EAAE,CAChC,IAAA,CAAA,mBAAA,CAAsB,IACX,EAAY,IAAI,CAAC,YAAY,CAAE,IAAI,CAAC,QAAQ,EAEvD,IAAA,CAAA,QAAA,CAA0B,EAAE,CAC5B,IAAA,CAAA,eAAA,CAAkB,IACP,EAAY,IAAI,CAAC,QAAQ,CAAE,IAAI,CAAC,QAAQ,EAI/C,IAAI,CAAC,KAAK,CAAC,EACf,CAEA,MAAO,CAAC,CAER,MAAO,CAAC,CAER,MAAM,CAAQ,CAAE,CACZ,IAAI,CAAC,QAAQ,CAAG,EAChB,IAAI,CAAC,YAAY,CAAG,EAAE,CACtB,IAAI,CAAC,QAAQ,CAAG,EAAE,CAClB,IAAI,CAAC,SAAS,CAAG,CAAA,EACjB,IAAI,CAAC,IAAI,EACb,CACJ,CAEO,MAAM,EAGT,YAAY,EAAsB,IAAI,CAAE,CAFxC,IAAA,CAAA,IAAA,CAAwB,KAAK,IAAI,CAAC,AAAgB,GAAhB,KAAK,MAAM,IAGrC,GACA,CAAA,IAAI,CAAC,QAAQ,CAAG,CADpB,CAGJ,CACJ,CAEO,SAAS,EACZ,CAAmB,CACnB,CAAuB,EAEvB,GAAI,EAAK,MAAM,EAAI,EAAG,OAAO,EAC7B,IAAI,EAAS,EACb,IAAK,IAAI,EAAI,EAAG,EAAI,EAAK,MAAM,CAAG,EAAG,IACjC,KAKiB,EAAW,EAL5B,IAKiB,EALE,CAAQ,CAAC,CAAI,CAAC,EAAE,CAAC,CAKR,EALU,CAAQ,CAAC,CAAI,CAAC,EAAI,EAAE,CAAC,CAMxD,EAAE,QAAQ,CAAC,IAAI,CAAC,EAAE,QAAQ,EAPjC,CAGA,OAAO,CACX,CCnDe,MAAA,UAA2B,EACtC,MAAO,CACH,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAE,IACtC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,GACvB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAE3B,CAEA,MAAO,EACC,IAAI,CAAC,SAAS,GACE,IAAI,CAAC,mBAAmB,GAC5C,ADqDD,SAAsB,CAAK,EAC9B,IAAK,IAAI,EAAI,EAAM,MAAM,CAAG,EAAG,EAAI,EAAG,IAAK,CACvC,IAAI,EAAI,KAAK,KAAK,CAAC,KAAK,MAAM,GAAM,CAAA,EAAI,CAAA,IACxC,AAVD,SAAc,CAAK,CAAE,CAAC,CAAE,CAAC,EAC5B,IAAM,EAAM,CAAK,CAAC,EAAE,AACpB,CAAA,CAAK,CAAC,EAAE,CAAG,CAAK,CAAC,EAAE,CACnB,CAAK,CAAC,EAAE,CAAG,CAEf,EAKa,EAAO,EAAG,EACnB,CACJ,EC1DqB,IAAI,CAAC,YAAY,EACN,IAAI,CAAC,mBAAmB,GAC1B,IAAI,CAAC,eAAe,IACtC,CAAA,IAAI,CAAC,QAAQ,CAAG,IAAI,IAAI,CAAC,YAAY,CAAC,AAAA,EAE1C,IAAI,CAAC,IAAI,GACL,IAAI,CAAC,QAAQ,EAAI,IAAI,CAAC,IAAI,EAC1B,CAAA,IAAI,CAAC,SAAS,CAAG,CAAA,CADrB,EAGJ,CACJ,CCrBe,MAAA,UAAmC,EAI9C,MAAO,CACH,IAAI,CAAC,QAAQ,CAAG,CAAC,CAAC,EAAE,CAAC,CACrB,IAAI,CAAC,YAAY,CAAG,CAAC,EAAE,CACvB,IAAI,CAAC,QAAQ,CAAG,CAAC,EAAE,CACnB,IAAI,CAAC,QAAQ,CAAG,EAAE,CAClB,IAAI,CAAC,cAAc,CAAG,GAC1B,CAEA,MAAO,CACH,GAAI,IAAI,CAAC,SAAS,CAAE,OACpB,IAAI,EAAgB,IAAI,CAAC,MAAM,GAE/B,AADe,IAAI,CAAC,MAAM,CAAC,GAClB,OAAO,CAAC,AAAC,IACd,IAAI,EAAgB,AAAA,EAAY,EAAS,IAAI,CAAC,QAAQ,CAClD,CAAA,EAAQ,MAAM,EAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,EAClC,EAAgB,IAAI,CAAC,cAAc,GACnC,IAAI,CAAC,QAAQ,CAAG,IAAI,EAAQ,CAC5B,IAAI,CAAC,cAAc,CAAG,GAG9B,IAAI,CAAC,YAAY,CAAG,IAAI,EAAQ,CAChC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EACvB,GACA,IAAI,CAAC,QAAQ,CAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,CAC9B,CAAA,IAAI,CAAC,QAAQ,EAAI,IAAI,CAAC,IAAI,EAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAI,CAAA,GACtD,CAAA,IAAI,CAAC,SAAS,CAAG,CAAA,CADrB,CAGJ,CAEA,QAAmB,CACf,IAAI,EAAO,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAC9B,EAAgB,EAChB,EAAW,IAAI,CAAC,QAAQ,CAAC,EAAE,CAC/B,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAE,IAAK,CAC3C,IAAI,EAAO,IAAI,CAAC,QAAQ,CAAC,EAAE,CACvB,EAAM,EAAK,MAAM,CACjB,EAAM,IACN,EAAO,EACP,EAAgB,EAChB,EAAW,IAAI,EAAK,CAE5B,CAEA,OADA,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAe,GAC7B,CACX,CAEA,OAAO,CAAmB,CAAE,CACxB,IAAI,EAAuB,EAAE,CAQ7B,OAHA,AAJmB,MAAM,IAAI,CACzB,CAAE,OAAQ,IAAI,CAAC,QAAQ,CAAC,MAAM,AAAC,EAC/B,CAAC,EAAG,IAAM,GACZ,MAAM,CAAC,AAAC,GAAM,CAAC,EAAK,QAAQ,CAAC,IAClB,OAAO,CAAC,AAAC,IAClB,EAAS,IAAI,CAAC,EAAK,MAAM,CAAC,CAAC,EAAO,EACtC,GACO,CACX,C,Y,G,C,C,C,K,I,GA3DA,IAAA,CAAA,QAAA,CAAiC,EAAE,CAEnC,IAAA,CAAA,cAAA,CAAiB,G,CA0DrB,CH1De,MAAA,EAYX,YAAY,CAAK,CAAE,CAXnB,IAAA,CAAA,SAAA,CAAY,IACZ,IAAA,CAAA,SAAA,CAAY,IACZ,IAAA,CAAA,SAAA,CAAkC,EAAE,CACpC,IAAA,CAAA,QAAA,CAAW,EAAE,CAGb,IAAA,CAAA,gBAAA,CAAmB,CACf,CAAE,MAAO,gBAAiB,MAAO,cAAe,EAChD,CAAE,MAAO,iBAAkB,MAAO,kBAAmB,EACxD,CACD,IAAA,CAAA,QAAA,CAAW,CAAA,EAEP,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,SAAS,CAAE,IAAK,CACrC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,EACtB,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,SAAS,CAAE,IAChC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,IAAI,CAAC,KAE/B,CACA,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC,KAAK,CACpD,CAEA,MAAM,CAAM,CAAE,CACV,IAAI,CAAC,EAAE,CAAG,EAEV,IAAI,CAAC,QAAQ,CAAG,EAAE,CAClB,IAAI,CAAC,aAAa,CAAC,IAAI,OAAO,CAAC,AAAC,GAAS,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAChE,CAEA,KAAM,CACE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,EACvC,CAEA,cAAc,CAAG,CAAE,CACf,IAAM,EAAa,EAAE,CACrB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAK,IAAK,CAC1B,IAAM,EAAS,IAAI,EAAO,IAAI,CAAC,YAAY,GAC3C,CAAA,EAAO,IAAI,CAAG,EACd,EAAW,IAAI,CAAC,EACpB,CACA,OAAO,CACX,CACA,UAAU,CAAc,CAAE,CACtB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EACvB,CACA,WAAW,CAAkB,CAAE,CAC3B,EAAS,OAAO,CAAC,AAAC,GAAW,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GACpD,CAEA,cAA0B,CACtB,IAAI,EAAS,GAAI,AAAA,CAAA,EAAA,EAAA,EAAG,MAAM,CACtB,KAAK,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,EAAG,IAAI,CAAC,SAAS,CAAG,IAC9C,KAAK,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,EAAG,IAAI,CAAC,SAAS,CAAG,YAElD,AAAI,AAAsC,MAAtC,IAAI,CAAC,SAAS,CAAC,EAAO,CAAC,CAAC,CAAC,EAAO,CAAC,CAAC,CAC3B,IAAI,CAAC,YAAY,GACd,CAClB,CAEA,aAAa,CAAY,CAAE,CACvB,OAAQ,GACJ,IAAK,gBAML,QALI,IAAI,CAAC,MAAM,CAAG,IAAI,EAAa,IAAI,CAAC,QAAQ,EAC5C,KACJ,KAAK,iBACD,IAAI,CAAC,MAAM,CAAG,IAAI,EAAqB,IAAI,CAAC,QAAQ,CAM5D,CACA,IAAI,CAAC,QAAQ,CAAG,CAAA,EAChB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CACnC,CAEA,eAAgB,CAIZ,MAHY,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,CACtC,GAAG,CAAC,AAAC,GAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,EAChC,IAAI,CAAC,KAAK,SAAS,EAAE,KAAK,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe,IAAI,CAAC,AAEzE,CAEA,gBAAiB,CACb,MAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,YAAY,CACrC,GAAG,CAAC,AAAC,GAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,EAChC,IAAI,CAAC,KAAK,SAAS,EAAE,KAAK,KAAK,CAChC,IAAI,CAAC,MAAM,CAAC,mBAAmB,IACjC,CAAC,AACP,CAEA,WAAY,CACR,IAAI,CAAC,QAAQ,CAAG,EAAE,CAClB,IAAI,CAAC,aAAa,CAAC,GAAG,OAAO,CAAC,AAAC,GAAS,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAC3D,IAAI,CAAC,QAAQ,CAAG,CAAA,EAChB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CACnC,CACJ,C,I,E,E,SIlGO,MAAM,EAAS,AAAC,GACZ,AAAC,IAyDJ,SAAS,EAAW,CAAc,EAC9B,EAAG,UAAU,GACb,EAAG,IAAI,CAAC,IAAK,IAAK,KAClB,EAAG,MAAM,CACH,AAAA,CAAA,EAAO,QAAQ,CAAC,CAAC,CAAG,EAAA,EAAO,EAAG,KAAK,CAAI,EAAW,SAAS,CAC3D,AAAA,CAAA,EAAO,QAAQ,CAAC,CAAC,CAAG,EAAA,EAAO,EAAG,MAAM,CAAI,EAAW,SAAS,CAC9D,IAGJ,EAAG,IAAI,CACH,EAAO,IAAI,CACT,AAAA,CAAA,EAAO,QAAQ,CAAC,CAAC,CAAG,CAAA,EAAK,EAAG,KAAK,CAAI,EAAW,SAAS,CAC3D,AAAE,CAAA,EAAO,QAAQ,CAAC,CAAC,CAAG,CAAA,EAAK,EAAG,MAAM,CAAI,EAAW,SAAS,CAC5D,KAEJ,EAAG,QAAQ,EACf,CAEA,SAAS,EAAS,CAAc,CAAE,EAAQ,CAAC,IAAK,IAAK,IAAI,EACrD,EAAG,IAAI,GACP,EAAG,UAAU,GACb,EAAG,MAAM,CAAC,GACV,EAAG,YAAY,CAAC,GAChB,EAAG,MAAM,GACT,IAAK,IAAI,EAAI,EAAG,EAAI,EAAK,MAAM,CAAE,IAAK,CAClC,IAAM,EAAS,EAAW,QAAQ,CAAC,CAAI,CAAC,EAAE,CAAC,CAC3C,EAAG,MAAM,CACH,AAAA,CAAA,EAAO,QAAQ,CAAC,CAAC,CAAG,EAAA,EAAO,EAAG,KAAK,CACjC,EAAW,SAAS,CACtB,AAAA,CAAA,EAAO,QAAQ,CAAC,CAAC,CAAG,EAAA,EAAO,EAAG,MAAM,CAClC,EAAW,SAAS,CAEhC,CACA,EAAG,QAAQ,GACX,EAAG,GAAG,EACV,CAzFA,EAAG,KAAK,CAAG,KACP,IAAM,EAAM,EAAG,YAAY,CAAC,EAAG,WAAW,CAAE,AAAkB,GAAlB,EAAG,YAAY,EAC3D,EAAI,SAAS,CAAC,KAEd,GACA,EAAI,QAAQ,CAAC,KAEb,GACA,EAAW,KAAK,CAAC,GACjB,EAAW,SAAS,EACxB,EAEA,EAAG,aAAa,CAAG,KACf,EAAG,YAAY,CAAC,EAAG,WAAW,CAAE,AAAkB,GAAlB,EAAG,YAAY,CACnD,EAEA,EAAG,IAAI,CAAG,KACN,EAAG,UAAU,CAAC,EAAG,EAAG,GACpB,AAaJ,WACI,EAAG,UAAU,GACb,IAAK,IAAI,EAAI,EAAG,EAAI,EAAW,SAAS,CAAE,IACtC,EAAG,MAAM,CAAC,IAAK,IAAK,IAAK,IACzB,EAAG,IAAI,CACF,EAAI,EAAG,KAAK,CAAI,EAAW,SAAS,CACrC,EACC,EAAI,EAAG,KAAK,CAAI,EAAW,SAAS,CACrC,EAAG,MAAM,EAGjB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAW,SAAS,CAAE,IACtC,EAAG,MAAM,CAAC,IAAK,IAAK,IAAK,IACzB,EAAG,IAAI,CACH,EACC,EAAI,EAAG,MAAM,CAAI,EAAW,SAAS,CACtC,EAAG,KAAK,CACP,EAAI,EAAG,MAAM,CAAI,EAAW,SAAS,EAG9C,EAAG,QAAQ,EACf,IAjCI,EAAW,QAAQ,CAAC,GAAG,CAAC,GACxB,EAAS,EAAW,MAAM,CAAC,YAAY,CAAE,CAAC,IAAK,IAAK,IAAK,IAAI,EAC7D,EAAS,EAAW,MAAM,CAAC,QAAQ,CAAE,CAAC,EAAG,EAAG,IAAI,EAChD,EAAG,IAAI,CAAC,IAAK,IAAK,KAClB,EAAG,QAAQ,CAAC,IACZ,EAAG,IAAI,CAAC,EAAW,cAAc,GAAI,GAAI,GAAI,EAAG,KAAK,CAAE,IACvD,EAAG,IAAI,CAAC,EAAG,EAAG,KACd,EAAG,QAAQ,CAAC,IACZ,EAAG,IAAI,CAAC,EAAW,aAAa,GAAI,GAAI,GAAI,EAAG,KAAK,CAAE,IACtD,EAAW,GAAG,EAClB,CA6DJ,E,I,E,E,QLxFJ,OAAM,UAAoB,AAAA,EAAA,GAAM,SAAS,CAIrC,YAAY,CAAK,CAAE,CACf,KAAK,CAAC,GACN,IAAI,CAAC,GAAG,CAAG,AAAA,EAAA,GAAM,SAAS,GAC1B,IAAI,CAAC,MAAM,CAAG,AAAA,EAAO,EAAM,UAAU,CACzC,CAEA,mBAAoB,CAChB,IAAI,CAAC,KAAK,CAAG,GAAI,CAAA,EAAA,EAAA,EAAG,IAAI,CAAC,MAAM,CAAE,IAAI,CAAC,GAAG,CAAC,OAAO,CACrD,CACA,QAAS,CACL,MAAO,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,MAAR,CAAY,IAAK,IAAI,CAAC,GAAG,A,EAC7B,CACJ,CAEA,MAAM,UAAqB,AAAA,EAAA,GAAM,SAAS,CAItC,YAAY,CAAK,CAAE,CACf,KAAK,CAAC,GACN,IAAI,CAAC,UAAU,CAAG,IAAI,EAAW,GACjC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,IAC7B,IAAI,CAAC,MAAM,CAAG,AAAA,EAAO,IAAI,CAAC,UAAU,CACxC,CACA,QAA0B,CACtB,MACI,AAAA,CAAA,EAAA,EAAA,IAAA,AAAA,EAAC,MADL,CACS,UAAU,kB,S,CACX,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,KAAD,CAAA,GACA,AAAA,CAAA,EAAA,EAAA,IAAA,AAAA,EAAC,MAAD,CAAK,UAAU,M,S,CACX,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,MAAD,CAAK,UAAU,WACX,SAAA,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,EAAA,OAAK,CAAN,CACI,aAAc,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,EAAE,CACjD,QAAS,IAAI,CAAC,UAAU,CAAC,gBAAgB,CACzC,SAAU,AAAC,IACP,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,EAAE,KAAK,CACxC,C,E,GAGR,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,MAAD,CAAK,UAAU,WACX,SAAA,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,SAAD,CACI,UAAU,kBACV,QAAS,AAAC,IACN,IAAI,CAAC,UAAU,CAAC,SAAS,EAC7B,EACH,SAAA,W,E,GAIL,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,MAAD,CAAK,UAAU,WACX,SAAA,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,SAAD,CACI,UAAU,kBACV,QAAS,AAAC,IACN,IAAI,CAAC,UAAU,CAAC,QAAQ,CACpB,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,AACjC,EACA,SAAU,IAAI,CAAC,UAAU,CAAC,QAAQ,CACrC,SAAA,Y,E,G,A,GAKT,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,MAAD,CAAK,UAAU,K,GACf,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,MAAD,CAAK,UAAU,MACX,SAAA,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,MAAD,CAAK,UAAU,YACX,SAAA,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,EAAD,CAAa,WAAY,IAAI,CAAC,UAAU,A,E,E,G,A,EAK5D,CACJ,CACA,AAAA,CAAA,EAAA,EAAA,UAAS,AAAT,EAAW,SAAS,cAAc,CAAC,QAAQ,MAAM,CAAC,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,EAAnD,CAAA","sources":["<anon>","traveling-sales-person/app.tsx","traveling-sales-person/simulation.ts","traveling-sales-person/algorithms/utils.ts","traveling-sales-person/algorithms/random-search.ts","traveling-sales-person/algorithms/branch-n-bound.ts","traveling-sales-person/sktech.ts"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire5b7a\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire5b7a\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\nvar $ayMG0 = parcelRequire(\"ayMG0\");\n\nvar $aRPiL = parcelRequire(\"aRPiL\");\n\nvar $a3QyA = parcelRequire(\"a3QyA\");\n\nvar $7Pz0b = parcelRequire(\"7Pz0b\");\nclass $c973d72e754c18f4$export$4b85d3515bd863a5 {\n    constructor(vertices){\n        this.iter = 0;\n        this.max_iter = 1000;\n        this.terminate = false;\n        this.current_path = [];\n        this.current_path_length = ()=>{\n            return $c973d72e754c18f4$export$1e6ac426e5707039(this.current_path, this.vertices);\n        };\n        this.min_path = [];\n        this.min_path_length = ()=>{\n            return $c973d72e754c18f4$export$1e6ac426e5707039(this.min_path, this.vertices);\n        };\n        this.reset(vertices);\n    }\n    init() {}\n    next() {}\n    reset(vertices) {\n        this.vertices = vertices;\n        this.current_path = [];\n        this.min_path = [];\n        this.terminate = false;\n        this.init();\n    }\n}\nclass $c973d72e754c18f4$export$3e8a3cc8713efbec {\n    constructor(position = null){\n        this.name = Math.ceil(Math.random() * 20);\n        if (position) this.position = position;\n    }\n}\nfunction $c973d72e754c18f4$export$1e6ac426e5707039(path, vertices) {\n    if (path.length <= 1) return 0;\n    let length = 0;\n    for(let i = 0; i < path.length - 1; i++)length += $c973d72e754c18f4$export$9f17032d917177de(vertices[path[i]], vertices[path[i + 1]]);\n    return length;\n}\nfunction $c973d72e754c18f4$export$9f17032d917177de(A, B) {\n    return A.position.dist(B.position);\n}\nfunction $c973d72e754c18f4$export$b0e76d9850c64156(array, i, j) {\n    const tmp = array[i];\n    array[i] = array[j];\n    array[j] = tmp;\n    return array;\n}\nfunction $c973d72e754c18f4$export$7ac3a88d34a76e7(array) {\n    for(var i = array.length - 1; i > 0; i--){\n        var j = Math.floor(Math.random() * (i + 1));\n        $c973d72e754c18f4$export$b0e76d9850c64156(array, i, j);\n    }\n}\n\n\n\nclass $30109d387314f547$export$2e2bcd8739ae039 extends (0, $c973d72e754c18f4$export$4b85d3515bd863a5) {\n    init() {\n        for(let i = 0; i < this.vertices.length; i++){\n            this.current_path.push(i);\n            this.min_path.push(i);\n        }\n    }\n    next() {\n        if (this.terminate) return;\n        const curr_length = this.current_path_length();\n        (0, $c973d72e754c18f4$export$7ac3a88d34a76e7)(this.current_path);\n        const new_path_length = this.current_path_length();\n        if (new_path_length < this.min_path_length()) this.min_path = [\n            ...this.current_path\n        ];\n        this.iter++;\n        if (this.max_iter <= this.iter) this.terminate = true;\n    }\n}\n\n\n\nclass $f90d0a03199c58ee$export$2e2bcd8739ae039 extends (0, $c973d72e754c18f4$export$4b85d3515bd863a5) {\n    init() {\n        this.frontier = [\n            [\n                0\n            ]\n        ];\n        this.current_path = [\n            0\n        ];\n        this.min_path = [\n            0\n        ];\n        this.bestPath = [];\n        this.bestPathLength = Infinity;\n    }\n    next() {\n        if (this.terminate) return;\n        let bestPathSoFar = this.choose();\n        let newPaths = this.expand(bestPathSoFar);\n        newPaths.forEach((newPath)=>{\n            let newPathLength = (0, $c973d72e754c18f4$export$1e6ac426e5707039)(newPath, this.vertices);\n            if (newPath.length == this.vertices.length) {\n                if (newPathLength < this.bestPathLength) {\n                    this.bestPath = [\n                        ...newPath\n                    ];\n                    this.bestPathLength = newPathLength;\n                }\n            }\n            this.current_path = [\n                ...newPath\n            ];\n            this.frontier.push(newPath);\n        });\n        this.min_path = [\n            ...this.bestPath\n        ];\n        if (this.max_iter <= this.iter || this.frontier.length <= 0) this.terminate = true;\n    }\n    choose() {\n        let best = this.frontier[0].length;\n        let bestPathIndex = 0;\n        let bestPath = this.frontier[0];\n        for(let i = 0; i < this.frontier.length; i++){\n            let path = this.frontier[i];\n            let len = path.length;\n            if (len < best) {\n                best = len;\n                bestPathIndex = i;\n                bestPath = [\n                    ...path\n                ];\n            }\n        }\n        this.frontier.splice(bestPathIndex, 1);\n        return bestPath;\n    }\n    expand(path) {\n        let newPaths = [];\n        let nextVertices = Array.from({\n            length: this.vertices.length\n        }, (x, i)=>i).filter((v)=>!path.includes(v));\n        nextVertices.forEach((vertex)=>{\n            newPaths.push(path.concat([\n                vertex\n            ]));\n        });\n        return newPaths;\n    }\n    constructor(...args){\n        super(...args);\n        this.frontier = [];\n        this.bestPathLength = Infinity;\n    }\n}\n\n\nclass $f28cb180fbb77cd7$export$2e2bcd8739ae039 {\n    constructor(props){\n        this.gridXSize = 100;\n        this.gridYSize = 100;\n        this.worldGrid = [];\n        this.vertices = [];\n        this.algorithmOptions = [\n            {\n                value: \"random-search\",\n                label: \"RandomSearch\"\n            },\n            {\n                value: \"branch-n-bound\",\n                label: \"Branch and Bound\"\n            }\n        ];\n        this.isActive = false;\n        for(let i = 0; i < this.gridXSize; i++){\n            this.worldGrid.push([]);\n            for(let j = 0; j < this.gridYSize; j++)this.worldGrid[i].push(null);\n        }\n        this.setAlgorithm(this.algorithmOptions[0].value);\n    }\n    setup(p5) {\n        this.p5 = p5;\n        this.vertices = [];\n        this.createVertexs(10).forEach((node)=>this.vertices.push(node));\n    }\n    run() {\n        if (this.isActive) this.search.next();\n    }\n    createVertexs(num) {\n        const newVertexs = [];\n        for(let i = 0; i < num; i++){\n            const vertex = new (0, $c973d72e754c18f4$export$3e8a3cc8713efbec)(this.newRandomPos());\n            vertex.name = i;\n            newVertexs.push(vertex);\n        }\n        return newVertexs;\n    }\n    addVertex(vertex) {\n        this.vertices.push(vertex);\n    }\n    addVertexs(vertices) {\n        vertices.forEach((vertex)=>this.vertices.push(vertex));\n    }\n    newRandomPos() {\n        let newPos = new (0, (/*@__PURE__*/$parcel$interopDefault($7Pz0b))).Vector(Math.floor(this.p5.random(5, this.gridXSize - 5)), Math.floor(this.p5.random(5, this.gridYSize - 5)));\n        if (this.worldGrid[newPos.x][newPos.y] != null) return this.newRandomPos();\n        else return newPos;\n    }\n    setAlgorithm(algo) {\n        switch(algo){\n            case \"random-search\":\n                this.search = new (0, $30109d387314f547$export$2e2bcd8739ae039)(this.vertices);\n                break;\n            case \"branch-n-bound\":\n                this.search = new (0, $f90d0a03199c58ee$export$2e2bcd8739ae039)(this.vertices);\n                break;\n            default:\n                console.l;\n                this.search = new (0, $30109d387314f547$export$2e2bcd8739ae039)(this.vertices);\n                break;\n        }\n        this.isActive = false;\n        this.search.reset(this.vertices);\n    }\n    getMinPathStr() {\n        const str = `Minimum ${this.search.min_path.map((x)=>this.vertices[x].name).join(\",\")} Length: ${Math.floor(this.search.min_path_length())}`;\n        return str;\n    }\n    getCurrPathStr() {\n        return `Current ${this.search.current_path.map((x)=>this.vertices[x].name).join(\",\")} Length: ${Math.floor(this.search.current_path_length())}`;\n    }\n    randomize() {\n        this.vertices = [];\n        this.createVertexs(6).forEach((node)=>this.vertices.push(node));\n        this.isActive = false;\n        this.search.reset(this.vertices);\n    }\n}\n\n\n\nvar $7Pz0b = parcelRequire(\"7Pz0b\");\nconst $a300ffd656204dd8$export$d038dabfbf61338f = (simulation)=>{\n    return (p5)=>{\n        let is_canvas_infocus = false;\n        let ygap = 0;\n        p5.setup = ()=>{\n            const cnv = p5.createCanvas(p5.windowWidth, p5.windowHeight * 0.8);\n            cnv.mouseOver(()=>{\n                is_canvas_infocus = true;\n            });\n            cnv.mouseOut(()=>{\n                is_canvas_infocus = false;\n            });\n            simulation.setup(p5);\n            simulation.randomize();\n        };\n        p5.windowResized = ()=>{\n            p5.resizeCanvas(p5.windowWidth, p5.windowHeight * 0.8);\n        };\n        p5.draw = ()=>{\n            p5.background(0, 0, 0);\n            drawGrid();\n            simulation.vertices.map(drawVertex);\n            drawPath(simulation.search.current_path, [\n                255,\n                255,\n                255,\n                100\n            ]);\n            drawPath(simulation.search.min_path, [\n                0,\n                0,\n                255\n            ]);\n            p5.fill(255, 255, 255);\n            p5.textSize(20);\n            p5.text(simulation.getCurrPathStr(), 20, 20, p5.width, 40);\n            p5.fill(0, 0, 255);\n            p5.textSize(20);\n            p5.text(simulation.getMinPathStr(), 20, 60, p5.width, 80);\n            simulation.run();\n        };\n        function drawGrid() {\n            p5.beginShape();\n            for(let i = 0; i < simulation.gridXSize; i++){\n                p5.stroke(255, 255, 255, 10);\n                p5.line(i * p5.width / simulation.gridXSize, 0, i * p5.width / simulation.gridXSize, p5.height);\n            }\n            for(let i = 0; i < simulation.gridYSize; i++){\n                p5.stroke(255, 255, 255, 10);\n                p5.line(0, i * p5.height / simulation.gridYSize, p5.width, i * p5.height / simulation.gridYSize);\n            }\n            p5.endShape();\n        }\n        function drawVertex(vertex) {\n            p5.beginShape();\n            p5.fill(255, 255, 255);\n            p5.circle((vertex.position.x + 0.5) * p5.width / simulation.gridXSize, (vertex.position.y + 0.5) * p5.height / simulation.gridYSize, 15);\n            p5.text(vertex.name, (vertex.position.x + 1) * p5.width / simulation.gridXSize, (vertex.position.y + 1) * p5.height / simulation.gridYSize, 600);\n            p5.endShape();\n        }\n        function drawPath(path, color = [\n            255,\n            255,\n            255\n        ]) {\n            p5.push();\n            p5.beginShape();\n            p5.stroke(color);\n            p5.strokeWeight(2);\n            p5.noFill();\n            for(let i = 0; i < path.length; i++){\n                const vertex = simulation.vertices[path[i]];\n                p5.vertex((vertex.position.x + 0.5) * p5.width / simulation.gridXSize, (vertex.position.y + 0.5) * p5.height / simulation.gridYSize);\n            }\n            p5.endShape();\n            p5.pop();\n        }\n    };\n};\n\n\n\nvar $acw62 = parcelRequire(\"acw62\");\nclass $ae563c2cc78a2e3a$var$P5Component extends (0, (/*@__PURE__*/$parcel$interopDefault($acw62))).Component {\n    constructor(props){\n        super(props);\n        this.ref = /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($acw62))).createRef();\n        this.sketch = (0, $a300ffd656204dd8$export$d038dabfbf61338f)(props.simulation);\n    }\n    componentDidMount() {\n        this.p5ref = new (0, (/*@__PURE__*/$parcel$interopDefault($7Pz0b)))(this.sketch, this.ref.current);\n    }\n    render() {\n        return /*#__PURE__*/ (0, $ayMG0.jsx)(\"div\", {\n            ref: this.ref\n        });\n    }\n}\nclass $ae563c2cc78a2e3a$var$AppComponent extends (0, (/*@__PURE__*/$parcel$interopDefault($acw62))).Component {\n    constructor(props){\n        super(props);\n        this.simulation = new (0, $f28cb180fbb77cd7$export$2e2bcd8739ae039)(props);\n        this.simulation.setAlgorithm(\"\");\n        this.Sketch = (0, $a300ffd656204dd8$export$d038dabfbf61338f)(this.simulation);\n    }\n    render() {\n        return /*#__PURE__*/ (0, $ayMG0.jsxs)(\"div\", {\n            className: \"container-fluid\",\n            children: [\n                /*#__PURE__*/ (0, $ayMG0.jsx)(\"br\", {}),\n                /*#__PURE__*/ (0, $ayMG0.jsxs)(\"div\", {\n                    className: \"row\",\n                    children: [\n                        /*#__PURE__*/ (0, $ayMG0.jsx)(\"div\", {\n                            className: \"col-md-4\",\n                            children: /*#__PURE__*/ (0, $ayMG0.jsx)((0, $a3QyA.default), {\n                                defaultValue: this.simulation.algorithmOptions[0],\n                                options: this.simulation.algorithmOptions,\n                                onChange: (x)=>{\n                                    this.simulation.setAlgorithm(x.value);\n                                }\n                            })\n                        }),\n                        /*#__PURE__*/ (0, $ayMG0.jsx)(\"div\", {\n                            className: \"col-md-2\",\n                            children: /*#__PURE__*/ (0, $ayMG0.jsx)(\"button\", {\n                                className: \"btn btn-primary\",\n                                onClick: (x)=>{\n                                    this.simulation.randomize();\n                                },\n                                children: \"randomize\"\n                            })\n                        }),\n                        /*#__PURE__*/ (0, $ayMG0.jsx)(\"div\", {\n                            className: \"col-md-2\",\n                            children: /*#__PURE__*/ (0, $ayMG0.jsx)(\"button\", {\n                                className: \"btn btn-success\",\n                                onClick: (x)=>{\n                                    this.simulation.isActive = !this.simulation.isActive;\n                                },\n                                disabled: this.simulation.isActive,\n                                children: \"start/stop\"\n                            })\n                        })\n                    ]\n                }),\n                /*#__PURE__*/ (0, $ayMG0.jsx)(\"div\", {\n                    className: \"row\"\n                }),\n                /*#__PURE__*/ (0, $ayMG0.jsx)(\"div\", {\n                    className: \"row\",\n                    children: /*#__PURE__*/ (0, $ayMG0.jsx)(\"div\", {\n                        className: \"col-md-12\",\n                        children: /*#__PURE__*/ (0, $ayMG0.jsx)($ae563c2cc78a2e3a$var$P5Component, {\n                            simulation: this.simulation\n                        })\n                    })\n                })\n            ]\n        });\n    }\n}\n(0, $aRPiL.createRoot)(document.getElementById(\"app\")).render(/*#__PURE__*/ (0, $ayMG0.jsx)($ae563c2cc78a2e3a$var$AppComponent, {}));\n\n\n//# sourceMappingURL=index.619b056a.js.map\n","import * as NumericInput from 'react-numeric-input';\nimport { createRoot } from 'react-dom/client';\n\nimport Select from 'react-select';\nimport Simulation from './simulation';\nimport P5 from 'p5';\nimport { Component } from 'react';\nimport { sketch } from './sktech';\nimport React from 'react';\n\nclass P5Component extends React.Component<{ simulation: Simulation }> {\n    sketch: any;\n    ref: any;\n    p5ref;\n    constructor(props) {\n        super(props);\n        this.ref = React.createRef();\n        this.sketch = sketch(props.simulation);\n    }\n\n    componentDidMount() {\n        this.p5ref = new P5(this.sketch, this.ref.current);\n    }\n    render() {\n        return <div ref={this.ref}></div>;\n    }\n}\n\nclass AppComponent extends React.Component<{}, {}> {\n    simulation: Simulation;\n    Sketch: any;\n    minPathStr: any;\n    constructor(props) {\n        super(props);\n        this.simulation = new Simulation(props);\n        this.simulation.setAlgorithm('');\n        this.Sketch = sketch(this.simulation);\n    }\n    render(): React.ReactNode {\n        return (\n            <div className=\"container-fluid\">\n                <br />\n                <div className=\"row\">\n                    <div className=\"col-md-4\">\n                        <Select\n                            defaultValue={this.simulation.algorithmOptions[0]}\n                            options={this.simulation.algorithmOptions}\n                            onChange={(x) => {\n                                this.simulation.setAlgorithm(x.value);\n                            }}\n                        />\n                    </div>\n                    <div className=\"col-md-2\">\n                        <button\n                            className=\"btn btn-primary\"\n                            onClick={(x) => {\n                                this.simulation.randomize();\n                            }}\n                        >\n                            randomize\n                        </button>\n                    </div>\n                    <div className=\"col-md-2\">\n                        <button\n                            className=\"btn btn-success\"\n                            onClick={(x) => {\n                                this.simulation.isActive =\n                                    !this.simulation.isActive;\n                            }}\n                            disabled={this.simulation.isActive}\n                        >\n                            start/stop\n                        </button>\n                    </div>\n                </div>\n                <div className=\"row\"></div>\n                <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        <P5Component simulation={this.simulation} />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\ncreateRoot(document.getElementById('app')).render(<AppComponent />);\n","import P5 from 'p5';\nimport { Search, Vertex } from './algorithms/utils';\nimport RandomSearch from './algorithms/random-search';\nimport BranchAndBoundSearch from './algorithms/branch-n-bound';\n\nexport default class Simulation {\n    gridXSize = 100;\n    gridYSize = 100;\n    worldGrid: Array<Array<Vertex>> = [];\n    vertices = [];\n    search?: Search;\n    p5: P5;\n    algorithmOptions = [\n        { value: 'random-search', label: 'RandomSearch' },\n        { value: 'branch-n-bound', label: 'Branch and Bound' },\n    ];\n    isActive = false;\n    constructor(props) {\n        for (let i = 0; i < this.gridXSize; i++) {\n            this.worldGrid.push([]);\n            for (let j = 0; j < this.gridYSize; j++) {\n                this.worldGrid[i].push(null);\n            }\n        }\n        this.setAlgorithm(this.algorithmOptions[0].value);\n    }\n\n    setup(p5: P5) {\n        this.p5 = p5;\n\n        this.vertices = [];\n        this.createVertexs(10).forEach((node) => this.vertices.push(node));\n    }\n\n    run() {\n        if (this.isActive) this.search.next();\n    }\n\n    createVertexs(num) {\n        const newVertexs = [];\n        for (let i = 0; i < num; i++) {\n            const vertex = new Vertex(this.newRandomPos());\n            vertex.name = i;\n            newVertexs.push(vertex);\n        }\n        return newVertexs;\n    }\n    addVertex(vertex: Vertex) {\n        this.vertices.push(vertex);\n    }\n    addVertexs(vertices: Vertex[]) {\n        vertices.forEach((vertex) => this.vertices.push(vertex));\n    }\n\n    newRandomPos(): P5.Vector {\n        let newPos = new P5.Vector(\n            Math.floor(this.p5.random(5, this.gridXSize - 5)),\n            Math.floor(this.p5.random(5, this.gridYSize - 5))\n        );\n        if (this.worldGrid[newPos.x][newPos.y] != null) {\n            return this.newRandomPos();\n        } else return newPos;\n    }\n\n    setAlgorithm(algo: string) {\n        switch (algo) {\n            case 'random-search':\n                this.search = new RandomSearch(this.vertices);\n                break;\n            case 'branch-n-bound':\n                this.search = new BranchAndBoundSearch(this.vertices);\n                break;\n            default:\n                console.l;\n                this.search = new RandomSearch(this.vertices);\n                break;\n        }\n        this.isActive = false;\n        this.search.reset(this.vertices);\n    }\n\n    getMinPathStr() {\n        const str = `Minimum ${this.search.min_path\n            .map((x) => this.vertices[x].name)\n            .join(',')} Length: ${Math.floor(this.search.min_path_length())}`;\n        return str;\n    }\n\n    getCurrPathStr() {\n        return `Current ${this.search.current_path\n            .map((x) => this.vertices[x].name)\n            .join(',')} Length: ${Math.floor(\n            this.search.current_path_length()\n        )}`;\n    }\n\n    randomize() {\n        this.vertices = [];\n        this.createVertexs(6).forEach((node) => this.vertices.push(node));\n        this.isActive = false;\n        this.search.reset(this.vertices);\n    }\n}\n","import P5 from 'p5';\n\nexport class Search {\n    iter = 0;\n    max_iter = 1000;\n    terminate = false;\n    vertices: Array<Vertex>;\n    current_path: Array<number> = [];\n    current_path_length = () => {\n        return path_length(this.current_path, this.vertices);\n    };\n    min_path: Array<number> = [];\n    min_path_length = () => {\n        return path_length(this.min_path, this.vertices);\n    };\n\n    constructor(vertices: Array<Vertex>) {\n        this.reset(vertices);\n    }\n\n    init() {}\n\n    next() {}\n\n    reset(vertices) {\n        this.vertices = vertices;\n        this.current_path = [];\n        this.min_path = [];\n        this.terminate = false;\n        this.init();\n    }\n}\n\nexport class Vertex {\n    name: string | number = Math.ceil(Math.random() * 20);\n    position: P5.Vector;\n    constructor(position: P5.Vector = null) {\n        if (position) {\n            this.position = position;\n        }\n    }\n}\n\nexport function path_length(\n    path: Array<number>,\n    vertices: Array<Vertex>\n): number {\n    if (path.length <= 1) return 0;\n    let length = 0;\n    for (let i = 0; i < path.length - 1; i++) {\n        length += distance(vertices[path[i]], vertices[path[i + 1]]);\n    }\n    return length;\n}\n\nexport function distance(A: Vertex, B: Vertex): number {\n    return A.position.dist(B.position);\n}\n\nexport function swap(array, i, j) {\n    const tmp = array[i];\n    array[i] = array[j];\n    array[j] = tmp;\n    return array;\n}\n\nexport function shuffleArray(array) {\n    for (var i = array.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        swap(array, i, j);\n    }\n}\n","import { Search, Vertex, shuffleArray } from './utils';\n\nexport default class RandomSearch extends Search {\n    init() {\n        for (let i = 0; i < this.vertices.length; i++) {\n            this.current_path.push(i);\n            this.min_path.push(i);\n        }\n    }\n\n    next() {\n        if (this.terminate) return;\n        const curr_length = this.current_path_length();\n        shuffleArray(this.current_path);\n        const new_path_length = this.current_path_length();\n        if (new_path_length < this.min_path_length()) {\n            this.min_path = [...this.current_path];\n        }\n        this.iter++;\n        if (this.max_iter <= this.iter) {\n            this.terminate = true;\n        }\n    }\n}\n","import { Search, Vertex, path_length, shuffleArray } from './utils';\n\nexport default class BranchAndBoundSearch extends Search {\n    frontier: Array<Array<number>> = [];\n    bestPath: number[];\n    bestPathLength = Infinity;\n    init() {\n        this.frontier = [[0]];\n        this.current_path = [0];\n        this.min_path = [0];\n        this.bestPath = [];\n        this.bestPathLength = Infinity;\n    }\n\n    next() {\n        if (this.terminate) return;\n        let bestPathSoFar = this.choose();\n        let newPaths = this.expand(bestPathSoFar);\n        newPaths.forEach((newPath) => {\n            let newPathLength = path_length(newPath, this.vertices);\n            if (newPath.length == this.vertices.length) {\n                if (newPathLength < this.bestPathLength) {\n                    this.bestPath = [...newPath];\n                    this.bestPathLength = newPathLength;\n                }\n            }\n            this.current_path = [...newPath];\n            this.frontier.push(newPath);\n        });\n        this.min_path = [...this.bestPath];\n        if (this.max_iter <= this.iter || this.frontier.length <= 0) {\n            this.terminate = true;\n        }\n    }\n\n    choose(): number[] {\n        let best = this.frontier[0].length;\n        let bestPathIndex = 0;\n        let bestPath = this.frontier[0];\n        for (let i = 0; i < this.frontier.length; i++) {\n            let path = this.frontier[i];\n            let len = path.length;\n            if (len < best) {\n                best = len;\n                bestPathIndex = i;\n                bestPath = [...path];\n            }\n        }\n        this.frontier.splice(bestPathIndex, 1);\n        return bestPath;\n    }\n\n    expand(path: Array<number>) {\n        let newPaths: number[][] = [];\n        let nextVertices = Array.from(\n            { length: this.vertices.length },\n            (x, i) => i\n        ).filter((v) => !path.includes(v));\n        nextVertices.forEach((vertex) => {\n            newPaths.push(path.concat([vertex]));\n        });\n        return newPaths;\n    }\n}\n","import P5 from 'p5';\nimport Simulation from './simulation';\nimport { Vertex } from './algorithms/utils';\n\nexport const sketch = (simulation: Simulation) => {\n    return (p5: P5) => {\n        let is_canvas_infocus = false;\n        let ygap = 0;\n        p5.setup = () => {\n            const cnv = p5.createCanvas(p5.windowWidth, p5.windowHeight * 0.8);\n            cnv.mouseOver(() => {\n                is_canvas_infocus = true;\n            });\n            cnv.mouseOut(() => {\n                is_canvas_infocus = false;\n            });\n            simulation.setup(p5);\n            simulation.randomize();\n        };\n\n        p5.windowResized = () => {\n            p5.resizeCanvas(p5.windowWidth, p5.windowHeight * 0.8);\n        };\n\n        p5.draw = () => {\n            p5.background(0, 0, 0);\n            drawGrid();\n            simulation.vertices.map(drawVertex);\n            drawPath(simulation.search.current_path, [255, 255, 255, 100]);\n            drawPath(simulation.search.min_path, [0, 0, 255]);\n            p5.fill(255, 255, 255);\n            p5.textSize(20);\n            p5.text(simulation.getCurrPathStr(), 20, 20, p5.width, 40);\n            p5.fill(0, 0, 255);\n            p5.textSize(20);\n            p5.text(simulation.getMinPathStr(), 20, 60, p5.width, 80);\n            simulation.run();\n        };\n\n        function drawGrid() {\n            p5.beginShape();\n            for (let i = 0; i < simulation.gridXSize; i++) {\n                p5.stroke(255, 255, 255, 10);\n                p5.line(\n                    (i * p5.width) / simulation.gridXSize,\n                    0,\n                    (i * p5.width) / simulation.gridXSize,\n                    p5.height\n                );\n            }\n            for (let i = 0; i < simulation.gridYSize; i++) {\n                p5.stroke(255, 255, 255, 10);\n                p5.line(\n                    0,\n                    (i * p5.height) / simulation.gridYSize,\n                    p5.width,\n                    (i * p5.height) / simulation.gridYSize\n                );\n            }\n            p5.endShape();\n        }\n\n        function drawVertex(vertex: Vertex) {\n            p5.beginShape();\n            p5.fill(255, 255, 255);\n            p5.circle(\n                ((vertex.position.x + 0.5) * p5.width) / simulation.gridXSize,\n                ((vertex.position.y + 0.5) * p5.height) / simulation.gridYSize,\n                15\n            );\n\n            p5.text(\n                vertex.name,\n                ((vertex.position.x + 1) * p5.width) / simulation.gridXSize,\n                ((vertex.position.y + 1) * p5.height) / simulation.gridYSize,\n                600\n            );\n            p5.endShape();\n        }\n\n        function drawPath(path: number[], color = [255, 255, 255]) {\n            p5.push();\n            p5.beginShape();\n            p5.stroke(color);\n            p5.strokeWeight(2);\n            p5.noFill();\n            for (let i = 0; i < path.length; i++) {\n                const vertex = simulation.vertices[path[i]];\n                p5.vertex(\n                    ((vertex.position.x + 0.5) * p5.width) /\n                        simulation.gridXSize,\n                    ((vertex.position.y + 0.5) * p5.height) /\n                        simulation.gridYSize\n                );\n            }\n            p5.endShape();\n            p5.pop();\n        }\n    };\n};\n"],"names":["$parcel$interopDefault","a","__esModule","default","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$ayMG0","$aRPiL","$a3QyA","$7Pz0b","$c973d72e754c18f4$export$4b85d3515bd863a5","constructor","vertices","iter","max_iter","terminate","current_path","current_path_length","$c973d72e754c18f4$export$1e6ac426e5707039","min_path","min_path_length","reset","next","$c973d72e754c18f4$export$3e8a3cc8713efbec","position","name","Math","ceil","random","path","length","i","A","B","dist","$30109d387314f547$export$2e2bcd8739ae039","push","array","j","floor","$c973d72e754c18f4$export$b0e76d9850c64156","tmp","$f90d0a03199c58ee$export$2e2bcd8739ae039","frontier","bestPath","bestPathLength","Infinity","bestPathSoFar","choose","newPaths","expand","forEach","newPath","newPathLength","best","bestPathIndex","len","splice","nextVertices","Array","from","x","filter","v","includes","vertex","concat","args","$f28cb180fbb77cd7$export$2e2bcd8739ae039","props","gridXSize","gridYSize","worldGrid","algorithmOptions","value","label","isActive","setAlgorithm","setup","p5","createVertexs","node","run","search","num","newVertexs","newRandomPos","addVertex","addVertexs","newPos","Vector","y","algo","getMinPathStr","map","join","getCurrPathStr","randomize","$a300ffd656204dd8$export$d038dabfbf61338f","simulation","drawVertex","beginShape","fill","circle","width","height","text","endShape","drawPath","color","stroke","strokeWeight","noFill","pop","cnv","createCanvas","windowWidth","windowHeight","mouseOver","mouseOut","windowResized","resizeCanvas","draw","background","drawGrid","line","textSize","$acw62","$ae563c2cc78a2e3a$var$P5Component","Component","ref","createRef","sketch","componentDidMount","p5ref","current","render","jsx","$ae563c2cc78a2e3a$var$AppComponent","Sketch","jsxs","className","children","defaultValue","options","onChange","onClick","disabled","createRoot","document","getElementById"],"version":3,"file":"index.619b056a.js.map"}