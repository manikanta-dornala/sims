{"mappings":"A,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,E,Q,C,I,E,E,SC6EA,G,C,AAAI,G,AAAA,E,U,C,AAAA,E,O,CAAA,C,EA5EW,AAAC,QAER,EAEJ,IAAI,EAAU,IACV,EAAU,EACV,EAAa,CACjB,CAAA,EAAG,OAAO,CAAG,KACT,EAAW,EAAG,UAAU,CAAC,cAAe,cAC5C,EAEA,EAAG,KAAK,CAAG,KACP,EAAG,YAAY,CACX,KAAK,IAAI,CAAC,EAAG,WAAW,EAAI,GAC5B,KAAK,IAAI,CAAC,EAAG,YAAY,EAAI,GAC7B,EAAG,KAAK,CAEhB,EACA,EAAG,aAAa,CAAG,KACf,EAAG,YAAY,CACX,KAAK,IAAI,CAAC,EAAG,WAAW,EAAI,GAC5B,KAAK,IAAI,CAAC,EAAG,YAAY,EAAI,GAErC,EACA,IAAM,EAAO,KACT,GAAI,EAAG,cAAc,CAAE,CAGnB,IAAI,EAAO,AAAA,CAAA,EAAG,OAAO,CAAG,EAAG,MAAM,AAAN,EAAU,EAAG,KAAK,CAAI,EAC7C,EAAO,AAAA,CAAA,EAAG,OAAO,CAAG,EAAG,MAAM,AAAN,EAAU,EAAG,MAAM,CAAI,EAGlD,GAAW,EACX,GAAW,CACf,CACJ,CACA,CAAA,EAAG,IAAI,CAAG,KACN,EAAG,UAAU,CAAC,EAAG,EAAG,GACpB,EAAS,UAAU,CAAC,WAAY,EAAG,KAAK,CAAG,EAAG,MAAM,EACpD,EAAS,UAAU,CAAC,aAAc,GAClC,EAAS,UAAU,CAAC,aAAc,GAClC,EAAS,UAAU,CAAC,gBAAiB,GACrC,EAAS,UAAU,CAAC,WAAY,EAAG,KAAK,CAAG,EAAG,MAAM,EACpD,EAAS,UAAU,CAAC,eAAgB,AAAc,KAAd,EAAG,MAAM,IAE7C,EAAS,UAAU,CACf,OACA,EAAU,EAAe,EAAK,EAAG,KAAK,CAAI,EAAG,MAAM,EAEvD,EAAS,UAAU,CACf,OACA,EAAU,EAAe,EAAK,EAAG,KAAK,CAAI,EAAG,MAAM,EAEvD,EAAS,UAAU,CAAC,OAAQ,EAAU,EAAa,GACnD,EAAS,UAAU,CAAC,OAAQ,EAAU,EAAa,GACnD,QAAQ,GAAG,CAAC,GACZ,EAAG,MAAM,CAAC,GACV,EAAG,IAAI,CAAC,EAAG,EAAG,EAAG,KAAK,CAAE,EAAG,MAAM,EACjC,GACJ,EAEA,EAAG,UAAU,CAAG,AAAC,IAET,EAAM,KAAK,CAAG,EAEd,GAHQ,IAMR,GAAc,mBAIlB,EAAa,EAAG,SAAS,CAAC,EAAY,EAAG,EAC7C,CACJ","sources":["<anon>","shader-art/mandelbrot-set/sketch.ts"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire5b7a\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire5b7a\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\nvar $7Pz0b = parcelRequire(\"7Pz0b\");\nconst $13f6582d22912256$var$sketch = (p5)=>{\n    var is_canvas_infocus = false;\n    let myShader;\n    let centerX = -0.7;\n    let centerY = 0;\n    let gridLength = 3;\n    p5.preload = ()=>{\n        myShader = p5.loadShader(\"shader.vert\", \"shader.frag\");\n    };\n    p5.setup = ()=>{\n        p5.createCanvas(Math.ceil(p5.windowWidth) + 10, Math.ceil(p5.windowHeight) + 10, p5.WEBGL);\n    };\n    p5.windowResized = ()=>{\n        p5.resizeCanvas(Math.ceil(p5.windowWidth) + 10, Math.ceil(p5.windowHeight) + 10);\n    };\n    const drag = ()=>{\n        if (p5.mouseIsPressed) {\n            // Scale the difference in previous mouse\n            // and current mouse pos by the sideLength\n            let dx = (p5.pmouseX - p5.mouseX) / p5.width * gridLength;\n            let dy = (p5.pmouseY - p5.mouseY) / p5.height * gridLength;\n            // Update the centre pos with the mouse movement\n            centerX += dx;\n            centerY -= dy;\n        }\n    };\n    p5.draw = ()=>{\n        p5.background(0, 0, 0);\n        myShader.setUniform(\"u_aspect\", p5.width / p5.height);\n        myShader.setUniform(\"u_center_x\", centerX);\n        myShader.setUniform(\"u_center_y\", centerY);\n        myShader.setUniform(\"u_grid_length\", gridLength);\n        myShader.setUniform(\"u_aspect\", p5.width / p5.height);\n        myShader.setUniform(\"u_framecount\", p5.millis() * 0.001);\n        myShader.setUniform(\"minx\", centerX - gridLength / 2 * p5.width / p5.height);\n        myShader.setUniform(\"maxx\", centerX + gridLength / 2 * p5.width / p5.height);\n        myShader.setUniform(\"miny\", centerY - gridLength / 2);\n        myShader.setUniform(\"maxy\", centerY + gridLength / 2);\n        console.log(gridLength);\n        p5.shader(myShader);\n        p5.rect(0, 0, p5.width, p5.height);\n        drag();\n    };\n    p5.mouseWheel = (event)=>{\n        var ratio = 0.99;\n        if (event.delta < 0) // Zoom in\n        gridLength *= ratio;\n        else // Zoom out\n        gridLength *= 1 / ratio;\n        // Make sure we're not getting crazy values\n        gridLength = p5.constrain(gridLength, 0, 4);\n    };\n};\nnew (0, (/*@__PURE__*/$parcel$interopDefault($7Pz0b)))($13f6582d22912256$var$sketch);\n\n\n//# sourceMappingURL=index.2227f6b0.js.map\n","import P5 from 'p5';\nconst sketch = (p5: P5) => {\n    var is_canvas_infocus = false;\n    let myShader;\n\n    let centerX = -0.7;\n    let centerY = 0;\n    let gridLength = 3;\n    p5.preload = () => {\n        myShader = p5.loadShader('shader.vert', 'shader.frag');\n    };\n\n    p5.setup = () => {\n        p5.createCanvas(\n            Math.ceil(p5.windowWidth) + 10,\n            Math.ceil(p5.windowHeight) + 10,\n            p5.WEBGL\n        );\n    };\n    p5.windowResized = () => {\n        p5.resizeCanvas(\n            Math.ceil(p5.windowWidth) + 10,\n            Math.ceil(p5.windowHeight) + 10\n        );\n    };\n    const drag = () => {\n        if (p5.mouseIsPressed) {\n            // Scale the difference in previous mouse\n            // and current mouse pos by the sideLength\n            let dx = ((p5.pmouseX - p5.mouseX) / p5.width) * gridLength;\n            let dy = ((p5.pmouseY - p5.mouseY) / p5.height) * gridLength;\n\n            // Update the centre pos with the mouse movement\n            centerX += dx;\n            centerY -= dy;\n        }\n    };\n    p5.draw = () => {\n        p5.background(0, 0, 0);\n        myShader.setUniform('u_aspect', p5.width / p5.height);\n        myShader.setUniform('u_center_x', centerX);\n        myShader.setUniform('u_center_y', centerY);\n        myShader.setUniform('u_grid_length', gridLength);\n        myShader.setUniform('u_aspect', p5.width / p5.height);\n        myShader.setUniform('u_framecount', p5.millis() * 0.001);\n\n        myShader.setUniform(\n            'minx',\n            centerX - ((gridLength / 2) * p5.width) / p5.height\n        );\n        myShader.setUniform(\n            'maxx',\n            centerX + ((gridLength / 2) * p5.width) / p5.height\n        );\n        myShader.setUniform('miny', centerY - gridLength / 2);\n        myShader.setUniform('maxy', centerY + gridLength / 2);\n        console.log(gridLength);\n        p5.shader(myShader);\n        p5.rect(0, 0, p5.width, p5.height);\n        drag();\n    };\n\n    p5.mouseWheel = (event) => {\n        var ratio = 0.99;\n        if (event.delta < 0) {\n            // Zoom in\n            gridLength *= ratio;\n        } else {\n            // Zoom out\n            gridLength *= 1 / ratio;\n        }\n\n        // Make sure we're not getting crazy values\n        gridLength = p5.constrain(gridLength, 0, 4);\n    };\n};\n\nnew P5(sketch);\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$7Pz0b","a","__esModule","default","p5","myShader","centerX","centerY","gridLength","preload","loadShader","setup","createCanvas","Math","ceil","windowWidth","windowHeight","WEBGL","windowResized","resizeCanvas","drag","mouseIsPressed","dx","pmouseX","mouseX","width","dy","pmouseY","mouseY","height","draw","background","setUniform","millis","console","log","shader","rect","mouseWheel","event","delta","constrain"],"version":3,"file":"index.2227f6b0.js.map"}