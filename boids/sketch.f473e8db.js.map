{"mappings":"A,S,E,C,E,O,G,E,U,C,E,O,C,C,C,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,A,C,E,E,Q,A,E,Q,S,C,C,C,E,O,c,C,E,O,C,U,C,I,I,E,I,K,E,W,C,E,a,C,C,GCiBA,IAAA,EAjBA,M,a,CACI,IAAA,CAAA,QAAA,CAAW,EACX,IAAA,CAAA,WAAA,CAAc,IACd,IAAA,CAAA,aAAA,CAAgB,EAChB,IAAA,CAAA,UAAA,CAAa,GACb,IAAA,CAAA,iBAAA,CAAoB,GACpB,IAAA,CAAA,aAAA,CAAgB,IAChB,IAAA,CAAA,QAAA,CAAW,EACX,IAAA,CAAA,QAAA,CAAW,GACX,IAAA,CAAA,QAAA,CAAW,GACX,IAAA,CAAA,gBAAA,CAAmB,EACnB,IAAA,CAAA,eAAA,CAAkB,IAClB,IAAA,CAAA,cAAA,CAAiB,IACjB,IAAA,CAAA,iBAAA,CAAoB,GACpB,IAAA,CAAA,oBAAA,CAAuB,IACvB,IAAA,CAAA,iBAAA,CAAoB,E,CACxB,C,G,I,E,E,S,E,E,S,G,E,S,E,SIfe,OAAA,EAIX,YAAY,CAAM,CAAE,CAChB,IAAI,CAAC,EAAE,CAAG,EACV,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CACtB,AAAgB,IAAhB,KAAK,MAAM,GACX,AAAgB,IAAhB,KAAK,MAAM,GACX,AAAgB,IAAhB,KAAK,MAAM,IAEf,IAAI,CAAC,IAAI,CAAG,KAAK,MAAM,GAAK,GAChC,CAEA,KAAK,CAAmB,CAAE,CAAa,CAAE,CACrC,IAAI,CAAC,EAAE,CAAC,IAAI,GACZ,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,EAAS,CAAC,CAAE,EAAS,CAAC,EACxC,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,GACf,IAAI,EAAM,EAAI,IAAI,CAAC,IAAI,CACvB,I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","sources":["<anon>","boids/params.ts","boids/sketch.ts","boids/simulation.ts","boids/boid.ts","boids/shapes/circle.ts"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire5b7a\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire5b7a\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"ld4Zl\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $0be4d37ff8450000$export$2e2bcd8739ae039);\nclass $0be4d37ff8450000$var$Params {\n    constructor(){\n        this.boidSize = 5;\n        this.lineMaxDist = 150;\n        this.WallThickness = 0;\n        this.WallBuffer = 50;\n        this.InitialPopulation = 10;\n        this.MaxPopulation = 150;\n        this.MaxSpeed = 5;\n        this.MinSpeed = 0.5;\n        this.MaxForce = 0.2;\n        this.SeperationWeight = 5;\n        this.AlignmentWeight = 1.5;\n        this.CohesionWeight = 1.5;\n        this.SphereOfInfluence = 50;\n        this.CohesionNeighborhood = 100;\n        this.DesiredSeperation = 25;\n    }\n}\nvar $0be4d37ff8450000$export$2e2bcd8739ae039 = $0be4d37ff8450000$var$Params;\n\n});\n\n\nvar $7Pz0b = parcelRequire(\"7Pz0b\");\n\nvar $ld4Zl = parcelRequire(\"ld4Zl\");\n\nvar $7Pz0b = parcelRequire(\"7Pz0b\");\n\nvar $7Pz0b = parcelRequire(\"7Pz0b\");\nclass $f02121749b70eb5d$export$2e2bcd8739ae039 {\n    constructor(p5){\n        this.p5 = p5;\n        this.color = this.p5.color(Math.random() * 255, Math.random() * 255, Math.random() * 255);\n        this.mass = Math.random() + 1.5;\n    }\n    draw(position, angle) {\n        this.p5.push();\n        this.p5.translate(position.x, position.y);\n        this.p5.rotate(angle);\n        var len = 5 * this.mass;\n        this.p5.fill(this.color);\n        // this.p5.stroke(255, 255, 255);\n        this.p5.line(0, 0, -len / 1.2, len / 4);\n        this.p5.line(0, 0, -len / 1.2, -len / 4);\n        this.p5.ellipse(0, 0, 5 * this.mass, 5 * this.mass);\n        this.p5.pop();\n    }\n}\n\n\nclass $64d8c609b1f2a9f4$export$2e2bcd8739ae039 {\n    constructor(p5){\n        this.p5 = p5;\n        this.position = this.p5.createVector(Math.random() * p5.windowWidth, Math.random() * p5.windowHeight);\n        this.heading = Math.random() * 2 * this.p5.PI;\n        this.velocity = this.p5.createVector(this.p5.cos(this.heading), this.p5.sin(this.heading)).normalize().mult(window.params.MaxSpeed * Math.random());\n        this.color = this.p5.color(Math.random() * 255, Math.random() * 255, Math.random() * 255);\n        this.shape = new (0, $f02121749b70eb5d$export$2e2bcd8739ae039)(this.p5);\n        this.mass = this.p5.map(Math.random(), 0, 1, 1, 2);\n    }\n    set mass(value) {\n        this.shape.mass = value;\n    }\n    get mass() {\n        return this.shape.mass;\n    }\n    draw() {\n        this.shape.draw(this.position, this.velocity.heading());\n    }\n    step(force) {\n        var acceleration = this.p5.createVector(force.x, force.y);\n        acceleration = acceleration.mult(this.mass);\n        this.velocity.add(acceleration);\n        if (this.velocity.mag() < window.params.MinSpeed) {\n            this.velocity.normalize();\n            this.velocity.mult(window.params.MinSpeed);\n        }\n        this.velocity.limit(window.params.MaxSpeed);\n        this.position.add(this.velocity);\n        this.warpWorld();\n    }\n    warpWorld() {\n        var wx = this.p5.windowWidth;\n        var wy = this.p5.windowHeight;\n        var b = window.params.WallBuffer;\n        if (this.position.x < b) this.position.x = wx - 1.1 * b;\n        else if (this.position.x > wx - b) this.position.x = 1.1 * b;\n        if (this.position.y < b) this.position.y = wy - 1.1 * b;\n        else if (this.position.y > wy - b) this.position.y = 1.1 * b;\n    }\n    getDistanceFrom(target) {\n        var distance = (0, (/*@__PURE__*/$parcel$interopDefault($7Pz0b))).Vector.dist(this.position, target);\n        var p2 = this.p5.createVector(target.x, target.y);\n        if (this.position.y < window.params.WallBuffer || this.position.y > this.p5.windowHeight - window.params.WallBuffer) // Toroidal warping\n        p2.y = -target.y + this.p5.windowHeight - window.params.WallBuffer;\n        if (this.position.x < window.params.WallBuffer || this.position.x > this.p5.windowWidth - window.params.WallBuffer) // Toroidal warping\n        p2.x = -target.x + this.p5.windowWidth - window.params.WallBuffer;\n        var distance2 = (0, (/*@__PURE__*/$parcel$interopDefault($7Pz0b))).Vector.dist(this.position, p2);\n        distance = this.p5.min(distance, distance2);\n        return distance;\n    }\n    AlignmentForce(boids) {\n        var averageVelocity = this.p5.createVector(0, 0);\n        var count = 0;\n        boids?.forEach((boid)=>{\n            var d = this.getDistanceFrom(boid.position);\n            if (d > 0 && d < window.params.SphereOfInfluence) {\n                averageVelocity.add(boid.velocity);\n                count++;\n            }\n        });\n        if (count > 0) {\n            averageVelocity.div(count);\n            var steer = (0, (/*@__PURE__*/$parcel$interopDefault($7Pz0b))).Vector.sub(averageVelocity, this.velocity);\n            steer.limit(window.params.MaxForce);\n            steer.mult(window.params.AlignmentWeight);\n            return steer;\n        }\n        return this.p5.createVector(0, 0);\n    }\n    CohesionForce(boids) {\n        var centerOfGravity = this.p5.createVector(0, 0);\n        var count = 0;\n        boids?.forEach((boid)=>{\n            var d = this.getDistanceFrom(boid.position);\n            if (d > 0 && d < window.params.CohesionNeighborhood) {\n                var v = this.p5.createVector();\n                v.x = boid.position.x;\n                v.y = boid.position.y;\n                centerOfGravity.add(boid.position);\n                count++;\n            }\n        });\n        if (count > 0) {\n            centerOfGravity.mult(1 / count);\n            var steer = this.Seek(centerOfGravity);\n            steer.mult(window.params.CohesionWeight);\n            return steer;\n        }\n        return this.p5.createVector(0, 0);\n    }\n    RepulsionForce(boids) {\n        var count = 0;\n        var steer = this.p5.createVector(0, 0);\n        boids?.forEach((boid)=>{\n            var d = this.getDistanceFrom(boid.position);\n            if (d > 0 && d < window.params.DesiredSeperation) {\n                count++;\n                var away = (0, (/*@__PURE__*/$parcel$interopDefault($7Pz0b))).Vector.sub(this.position, boid.position);\n                away.mult(1 / d);\n                steer.add(away);\n            }\n        });\n        if (steer.mag() > 0 && count > 0) steer.limit(window.params.MaxForce);\n        steer.mult(window.params.SeperationWeight);\n        return steer;\n    }\n    Seek(target) {\n        var desired = (0, (/*@__PURE__*/$parcel$interopDefault($7Pz0b))).Vector.sub(target, this.position);\n        desired.normalize();\n        desired.mult(window.params.MaxSpeed);\n        var steer = (0, (/*@__PURE__*/$parcel$interopDefault($7Pz0b))).Vector.sub(desired, this.velocity);\n        steer.limit(window.params.MaxForce);\n        return steer;\n    }\n    Flee(target) {\n        var desired = (0, (/*@__PURE__*/$parcel$interopDefault($7Pz0b))).Vector.sub(this.position, target);\n        desired.normalize();\n        desired.mult(window.params.MaxSpeed);\n        var steer = (0, (/*@__PURE__*/$parcel$interopDefault($7Pz0b))).Vector.sub(desired, this.velocity);\n        steer.limit(window.params.MaxForce);\n        return steer;\n    }\n    GetSteeringForces(boids) {\n        var align = this.AlignmentForce(boids);\n        var repulsion = this.RepulsionForce(boids);\n        var cohesion = this.CohesionForce(boids);\n        var force = this.p5.createVector(0, 0);\n        force.add(align);\n        force.add(repulsion);\n        force.add(cohesion);\n        return force;\n    }\n}\n\n\nclass $a5e6915164db9a3c$export$2e2bcd8739ae039 {\n    constructor(p5){\n        this.boids = [];\n        this.p5 = p5;\n    }\n    run() {\n        this.boids.forEach((boid)=>{\n            // apply physics\n            let force = boid.GetSteeringForces(this.boids);\n            boid.step(force);\n            // Draw things\n            boid.draw();\n        });\n    }\n    drawLines(boid, boids) {\n        boids.forEach((otherboid)=>{\n            let d = (0, (/*@__PURE__*/$parcel$interopDefault($7Pz0b))).Vector.dist(otherboid.position, boid.position);\n            if (d < window.params.lineMaxDist) {\n                this.p5.stroke(this.p5.color(0, 255, 0, this.p5.map(d, 0, window.params.lineMaxDist, 255, 0)));\n                this.p5.strokeWeight(this.p5.map(d, 0, window.params.lineMaxDist, 2, 0));\n                this.p5.line(boid.position.x, boid.position.y, otherboid.position.x, otherboid.position.y);\n            }\n        });\n    }\n    addNewboid() {\n        if (this.boids.length < window.params.MaxPopulation) {\n            let boid = new (0, $64d8c609b1f2a9f4$export$2e2bcd8739ae039)(this.p5);\n            this.boids.push(boid);\n        }\n    }\n}\n\n\nwindow.params = new (0, $ld4Zl.default)();\nconst $cf8ca633f043c102$var$sketch = (p5)=>{\n    var is_canvas_infocus = false;\n    var simulation = new (0, $a5e6915164db9a3c$export$2e2bcd8739ae039)(p5);\n    window.simulation = simulation;\n    p5.setup = ()=>{\n        var cnv = p5.createCanvas(p5.windowWidth, p5.windowHeight);\n        cnv.mouseOver(()=>{\n            is_canvas_infocus = true;\n        });\n        cnv.mouseOut(()=>{\n            is_canvas_infocus = false;\n        });\n        cnv.style(\"display\", \"block\");\n        cnv.parent(\"sketch-holder\");\n        for(let i = 0; i < window.params.InitialPopulation; i++)simulation.addNewboid();\n    };\n    p5.windowResized = ()=>{\n        p5.resizeCanvas(p5.windowWidth, p5.windowHeight);\n    };\n    p5.draw = ()=>{\n        p5.background(255, 255, 255);\n        simulation.run();\n    };\n};\nnew (0, (/*@__PURE__*/$parcel$interopDefault($7Pz0b)))($cf8ca633f043c102$var$sketch);\n\n\n//# sourceMappingURL=sketch.f473e8db.js.map\n","class Params {\n    boidSize = 5;\n    lineMaxDist = 150;\n    WallThickness = 0;\n    WallBuffer = 50;\n    InitialPopulation = 10;\n    MaxPopulation = 150;\n    MaxSpeed = 5;\n    MinSpeed = 0.5;\n    MaxForce = 0.2;\n    SeperationWeight = 5;\n    AlignmentWeight = 1.5;\n    CohesionWeight = 1.5;\n    SphereOfInfluence = 50;\n    CohesionNeighborhood = 100;\n    DesiredSeperation = 25;\n}\nexport default Params;\n","import P5 from 'p5';\nimport Params from './params';\nimport Simulation from './simulation';\nwindow.params = new Params();\nconst sketch = (p5: P5) => {\n    var is_canvas_infocus = false;\n    var simulation = new Simulation(p5);\n    window.simulation = simulation;\n    p5.setup = () => {\n        var cnv = p5.createCanvas(p5.windowWidth, p5.windowHeight);\n        cnv.mouseOver(() => {\n            is_canvas_infocus = true;\n        });\n        cnv.mouseOut(() => {\n            is_canvas_infocus = false;\n        });\n        cnv.style('display', 'block');\n        cnv.parent('sketch-holder');\n        for (let i = 0; i < window.params.InitialPopulation; i++) {\n            simulation.addNewboid();\n        }\n    };\n\n    p5.windowResized = () => {\n        p5.resizeCanvas(p5.windowWidth, p5.windowHeight);\n    };\n\n    p5.draw = () => {\n        p5.background(255, 255, 255);\n        simulation.run();\n    };\n};\nnew P5(sketch);\n","import P5 from 'p5';\nimport params from './params';\nimport Boid from './boid';\nexport default class Simulation {\n    boids: Array<Boid> = [];\n    p5: P5;\n\n    constructor(p5: P5) {\n        this.p5 = p5;\n    }\n\n    run() {\n        this.boids.forEach((boid) => {\n            // apply physics\n            let force = boid.GetSteeringForces(this.boids);\n            boid.step(force);\n            // Draw things\n            boid.draw();\n        });\n    }\n\n    drawLines(boid: Boid, boids: Array<Boid>) {\n        boids.forEach((otherboid) => {\n            let d = P5.Vector.dist(otherboid.position, boid.position);\n            if (d < window.params.lineMaxDist) {\n                this.p5.stroke(\n                    this.p5.color(\n                        0,\n                        255,\n                        0,\n                        this.p5.map(d, 0, window.params.lineMaxDist, 255, 0)\n                    )\n                );\n                this.p5.strokeWeight(\n                    this.p5.map(d, 0, window.params.lineMaxDist, 2, 0)\n                );\n                this.p5.line(\n                    boid.position.x,\n                    boid.position.y,\n                    otherboid.position.x,\n                    otherboid.position.y\n                );\n            }\n        });\n    }\n\n    addNewboid() {\n        if (this.boids.length < window.params.MaxPopulation) {\n            let boid = new Boid(this.p5);\n            this.boids.push(boid);\n        }\n    }\n}\n","import P5 from 'p5';\nimport Params from './params';\nimport CircleBoid from './shapes/circle';\nimport FishBoid from './shapes/fish';\nexport default class Boid {\n    // mass: number;\n    color: P5.Color;\n    position: P5.Vector;\n    velocity: P5.Vector;\n    heading: number;\n    p5: P5;\n    shape;\n    constructor(p5: P5) {\n        this.p5 = p5;\n        this.position = this.p5.createVector(\n            Math.random() * p5.windowWidth,\n            Math.random() * p5.windowHeight\n        );\n        this.heading = Math.random() * 2 * this.p5.PI;\n        this.velocity = this.p5\n            .createVector(this.p5.cos(this.heading), this.p5.sin(this.heading))\n            .normalize()\n            .mult(window.params.MaxSpeed * Math.random());\n        this.color = this.p5.color(\n            Math.random() * 255,\n            Math.random() * 255,\n            Math.random() * 255\n        );\n        this.shape = new CircleBoid(this.p5);\n        this.mass = this.p5.map(Math.random(), 0, 1, 1, 2);\n    }\n\n    set mass(value) {\n        this.shape.mass = value;\n    }\n\n    get mass() {\n        return this.shape.mass;\n    }\n\n    draw() {\n        this.shape.draw(this.position, this.velocity.heading());\n    }\n\n    step(force: P5.Vector) {\n        var acceleration = this.p5.createVector(force.x, force.y);\n        acceleration = acceleration.mult(this.mass);\n        this.velocity.add(acceleration);\n        if (this.velocity.mag() < window.params.MinSpeed) {\n            this.velocity.normalize();\n            this.velocity.mult(window.params.MinSpeed);\n        }\n        this.velocity.limit(window.params.MaxSpeed);\n        this.position.add(this.velocity);\n        this.warpWorld();\n    }\n\n    warpWorld() {\n        var wx = this.p5.windowWidth;\n        var wy = this.p5.windowHeight;\n        var b = window.params.WallBuffer;\n        if (this.position.x < b) {\n            this.position.x = wx - 1.1 * b;\n        } else if (this.position.x > wx - b) {\n            this.position.x = 1.1 * b;\n        }\n\n        if (this.position.y < b) {\n            this.position.y = wy - 1.1 * b;\n        } else if (this.position.y > wy - b) {\n            this.position.y = 1.1 * b;\n        }\n    }\n\n    getDistanceFrom(target: P5.Vector) {\n        var distance = P5.Vector.dist(this.position, target);\n        var p2 = this.p5.createVector(target.x, target.y);\n        if (\n            this.position.y < window.params.WallBuffer ||\n            this.position.y > this.p5.windowHeight - window.params.WallBuffer\n        ) {\n            // Toroidal warping\n            p2.y = -target.y + this.p5.windowHeight - window.params.WallBuffer;\n        }\n        if (\n            this.position.x < window.params.WallBuffer ||\n            this.position.x > this.p5.windowWidth - window.params.WallBuffer\n        ) {\n            // Toroidal warping\n            p2.x = -target.x + this.p5.windowWidth - window.params.WallBuffer;\n        }\n        var distance2 = P5.Vector.dist(this.position, p2);\n        distance = this.p5.min(distance, distance2);\n        return distance;\n    }\n\n    AlignmentForce(boids: Array<Boid>) {\n        var averageVelocity = this.p5.createVector(0, 0);\n        var count = 0;\n        boids?.forEach((boid) => {\n            var d = this.getDistanceFrom(boid.position);\n            if (d > 0 && d < window.params.SphereOfInfluence) {\n                averageVelocity.add(boid.velocity);\n                count++;\n            }\n        });\n\n        if (count > 0) {\n            averageVelocity.div(count);\n            var steer = P5.Vector.sub(averageVelocity, this.velocity);\n            steer.limit(window.params.MaxForce);\n            steer.mult(window.params.AlignmentWeight);\n            return steer;\n        }\n        return this.p5.createVector(0, 0);\n    }\n\n    CohesionForce(boids: Array<Boid>) {\n        var centerOfGravity = this.p5.createVector(0, 0);\n        var count = 0;\n        boids?.forEach((boid) => {\n            var d = this.getDistanceFrom(boid.position);\n            if (d > 0 && d < window.params.CohesionNeighborhood) {\n                var v = this.p5.createVector();\n                v.x = boid.position.x;\n                v.y = boid.position.y;\n                centerOfGravity.add(boid.position);\n                count++;\n            }\n        });\n        if (count > 0) {\n            centerOfGravity.mult(1 / count);\n            var steer = this.Seek(centerOfGravity);\n            steer.mult(window.params.CohesionWeight);\n            return steer;\n        }\n        return this.p5.createVector(0, 0);\n    }\n\n    RepulsionForce(boids: Array<Boid>) {\n        var count = 0;\n        var steer = this.p5.createVector(0, 0);\n        boids?.forEach((boid) => {\n            var d = this.getDistanceFrom(boid.position);\n            if (d > 0 && d < window.params.DesiredSeperation) {\n                count++;\n                var away = P5.Vector.sub(this.position, boid.position);\n                away.mult(1 / d);\n                steer.add(away);\n            }\n        });\n        if (steer.mag() > 0 && count > 0) {\n            steer.limit(window.params.MaxForce);\n        }\n        steer.mult(window.params.SeperationWeight);\n        return steer;\n    }\n\n    Seek(target: P5.Vector) {\n        var desired = P5.Vector.sub(target, this.position);\n        desired.normalize();\n        desired.mult(window.params.MaxSpeed);\n        var steer = P5.Vector.sub(desired, this.velocity);\n        steer.limit(window.params.MaxForce);\n        return steer;\n    }\n\n    Flee(target: P5.Vector) {\n        var desired = P5.Vector.sub(this.position, target);\n        desired.normalize();\n        desired.mult(window.params.MaxSpeed);\n        var steer = P5.Vector.sub(desired, this.velocity);\n        steer.limit(window.params.MaxForce);\n        return steer;\n    }\n\n    GetSteeringForces(boids: Array<Boid>) {\n        var align = this.AlignmentForce(boids);\n        var repulsion = this.RepulsionForce(boids);\n        var cohesion = this.CohesionForce(boids);\n        var force = this.p5.createVector(0, 0);\n        force.add(align);\n        force.add(repulsion);\n        force.add(cohesion);\n        return force;\n    }\n}\n","import P5 from 'p5';\nexport default class CircleBoid {\n    mass: number;\n    color;\n    p5: P5;\n    constructor(p5: P5) {\n        this.p5 = p5;\n        this.color = this.p5.color(\n            Math.random() * 255,\n            Math.random() * 255,\n            Math.random() * 255\n        );\n        this.mass = Math.random() + 1.5;\n    }\n\n    draw(position: P5.Vector, angle: number) {\n        this.p5.push();\n        this.p5.translate(position.x, position.y);\n        this.p5.rotate(angle);\n        var len = 5 * this.mass;\n        this.p5.fill(this.color);\n        // this.p5.stroke(255, 255, 255);\n        this.p5.line(0, 0, -len / 1.2, len / 4);\n        this.p5.line(0, 0, -len / 1.2, -len / 4);\n        this.p5.ellipse(0, 0, 5 * this.mass, 5 * this.mass);\n        this.p5.pop();\n    }\n}\n"],"names":["$parcel$interopDefault","a","__esModule","default","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","Object","defineProperty","get","$0be4d37ff8450000$export$2e2bcd8739ae039","set","s","enumerable","configurable","constructor","boidSize","lineMaxDist","WallThickness","WallBuffer","InitialPopulation","MaxPopulation","MaxSpeed","MinSpeed","MaxForce","SeperationWeight","AlignmentWeight","CohesionWeight","SphereOfInfluence","CohesionNeighborhood","DesiredSeperation","$7Pz0b","$ld4Zl","$f02121749b70eb5d$export$2e2bcd8739ae039","p5","color","Math","random","mass","draw","position","angle","push","translate","x","y","rotate","len","fill","line","ellipse","pop","$64d8c609b1f2a9f4$export$2e2bcd8739ae039","createVector","windowWidth","windowHeight","heading","PI","velocity","cos","sin","normalize","mult","window","params","shape","map","value","step","force","acceleration","add","mag","limit","warpWorld","wx","wy","b","getDistanceFrom","target","distance","Vector","dist","p2","distance2","min","AlignmentForce","boids","averageVelocity","count","forEach","boid","d","div","steer","sub","CohesionForce","centerOfGravity","v","Seek","RepulsionForce","away","desired","Flee","GetSteeringForces","align","repulsion","cohesion","$a5e6915164db9a3c$export$2e2bcd8739ae039","run","drawLines","otherboid","stroke","strokeWeight","addNewboid","length","simulation","setup","cnv","createCanvas","mouseOver","mouseOut","style","parent","i","windowResized","resizeCanvas","background"],"version":3,"file":"sketch.f473e8db.js.map"}