{"mappings":"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","sources":["boids/params.ts","boids/shapes/circle.ts","boids/boid.ts","boids/simulation.ts","boids/sketch.ts"],"sourcesContent":["class Params {\n    boidSize = 5;\n    lineMaxDist = 150;\n    WallThickness = 0;\n    WallBuffer = 50;\n    InitialPopulation = 10;\n    MaxPopulation = 150;\n    MaxSpeed = 5;\n    MinSpeed = 0.5;\n    MaxForce = 0.2;\n    SeperationWeight = 5;\n    AlignmentWeight = 1.5;\n    CohesionWeight = 1.5;\n    SphereOfInfluence = 50;\n    CohesionNeighborhood = 100;\n    DesiredSeperation = 25;\n}\nexport default Params;\n","import P5 from 'p5';\nexport default class CircleBoid {\n    mass: number;\n    color;\n    p5: P5;\n    constructor(p5: P5) {\n        this.p5 = p5;\n        this.color = this.p5.color(\n            Math.random() * 255,\n            Math.random() * 255,\n            Math.random() * 255\n        );\n        this.mass = Math.random() + 1.5;\n    }\n\n    draw(position: P5.Vector, angle: number) {\n        this.p5.push();\n        this.p5.translate(position.x, position.y);\n        this.p5.rotate(angle);\n        var len = 5 * this.mass;\n        this.p5.fill(this.color);\n        // this.p5.stroke(255, 255, 255);\n        this.p5.line(0, 0, -len / 1.2, len / 4);\n        this.p5.line(0, 0, -len / 1.2, -len / 4);\n        this.p5.ellipse(0, 0, 5 * this.mass, 5 * this.mass);\n        this.p5.pop();\n    }\n}\n","import P5 from 'p5';\nimport Params from './params';\nimport CircleBoid from './shapes/circle';\nimport FishBoid from './shapes/fish';\nexport default class Boid {\n    // mass: number;\n    color: P5.Color;\n    position: P5.Vector;\n    velocity: P5.Vector;\n    heading: number;\n    p5: P5;\n    shape;\n    constructor(p5: P5) {\n        this.p5 = p5;\n        this.position = this.p5.createVector(\n            Math.random() * p5.windowWidth,\n            Math.random() * p5.windowHeight\n        );\n        this.heading = Math.random() * 2 * this.p5.PI;\n        this.velocity = this.p5\n            .createVector(this.p5.cos(this.heading), this.p5.sin(this.heading))\n            .normalize()\n            .mult(window.params.MaxSpeed * Math.random());\n        this.color = this.p5.color(\n            Math.random() * 255,\n            Math.random() * 255,\n            Math.random() * 255\n        );\n        this.shape = new CircleBoid(this.p5);\n        this.mass = this.p5.map(Math.random(), 0, 1, 1, 2);\n    }\n\n    set mass(value) {\n        this.shape.mass = value;\n    }\n\n    get mass() {\n        return this.shape.mass;\n    }\n\n    draw() {\n        this.shape.draw(this.position, this.velocity.heading());\n    }\n\n    step(force: P5.Vector) {\n        var acceleration = P5.Vector.mult(force, this.mass);\n        this.velocity.add(acceleration);\n        if (this.velocity.mag() < window.params.MinSpeed) {\n            this.velocity.normalize();\n            this.velocity.mult(window.params.MinSpeed);\n        }\n        this.velocity.limit(window.params.MaxSpeed);\n        this.position.add(this.velocity);\n        this.warpWorld();\n    }\n\n    warpWorld() {\n        var wx = this.p5.windowWidth;\n        var wy = this.p5.windowHeight;\n        var b = window.params.WallBuffer;\n        if (this.position.x < b) {\n            this.position.x = wx - 1.1 * b;\n        } else if (this.position.x > wx - b) {\n            this.position.x = 1.1 * b;\n        }\n\n        if (this.position.y < b) {\n            this.position.y = wy - 1.1 * b;\n        } else if (this.position.y > wy - b) {\n            this.position.y = 1.1 * b;\n        }\n    }\n\n    getDistanceFrom(target: P5.Vector) {\n        var distance = P5.Vector.dist(this.position, target);\n        var p2 = this.p5.createVector(target.x, target.y);\n        if (\n            this.position.y < window.params.WallBuffer ||\n            this.position.y > this.p5.windowHeight - window.params.WallBuffer\n        ) {\n            // Toroidal warping\n            p2.y = -target.y + this.p5.windowHeight - window.params.WallBuffer;\n        }\n        if (\n            this.position.x < window.params.WallBuffer ||\n            this.position.x > this.p5.windowWidth - window.params.WallBuffer\n        ) {\n            // Toroidal warping\n            p2.x = -target.x + this.p5.windowWidth - window.params.WallBuffer;\n        }\n        var distance2 = P5.Vector.dist(this.position, p2);\n        distance = this.p5.min(distance, distance2);\n        return distance;\n    }\n\n    AlignmentForce(boids: Array<Boid>) {\n        var averageVelocity = this.p5.createVector(0, 0);\n        var count = 0;\n        boids?.forEach((boid) => {\n            var d = this.getDistanceFrom(boid.position);\n            if (d > 0 && d < window.params.SphereOfInfluence) {\n                averageVelocity.add(boid.velocity);\n                count++;\n            }\n        });\n\n        if (count > 0) {\n            averageVelocity.div(count);\n            var steer = P5.Vector.sub(averageVelocity, this.velocity);\n            steer.limit(window.params.MaxForce);\n            steer.mult(window.params.AlignmentWeight);\n            return steer;\n        }\n        return this.p5.createVector(0, 0);\n    }\n\n    CohesionForce(boids: Array<Boid>) {\n        var centerOfGravity = this.p5.createVector(0, 0);\n        var count = 0;\n        boids?.forEach((boid) => {\n            var d = this.getDistanceFrom(boid.position);\n            if (d > 0 && d < window.params.CohesionNeighborhood) {\n                var v = this.p5.createVector();\n                v.x = boid.position.x;\n                v.y = boid.position.y;\n                centerOfGravity.add(boid.position);\n                count++;\n            }\n        });\n        if (count > 0) {\n            centerOfGravity.mult(1 / count);\n            var steer = this.Seek(centerOfGravity);\n            steer.mult(window.params.CohesionWeight);\n            return steer;\n        }\n        return this.p5.createVector(0, 0);\n    }\n\n    RepulsionForce(boids: Array<Boid>) {\n        var count = 0;\n        var steer = this.p5.createVector(0, 0);\n        boids?.forEach((boid) => {\n            var d = this.getDistanceFrom(boid.position);\n            if (d > 0 && d < window.params.DesiredSeperation) {\n                count++;\n                var away = P5.Vector.sub(this.position, boid.position);\n                away.mult(1 / d);\n                steer.add(away);\n            }\n        });\n        if (steer.mag() > 0 && count > 0) {\n            steer.limit(window.params.MaxForce);\n        }\n        steer.mult(window.params.SeperationWeight);\n        return steer;\n    }\n\n    Seek(target: P5.Vector) {\n        var desired = P5.Vector.sub(target, this.position);\n        desired.normalize();\n        desired.mult(window.params.MaxSpeed);\n        var steer = P5.Vector.sub(desired, this.velocity);\n        steer.limit(window.params.MaxForce);\n        return steer;\n    }\n\n    Flee(target: P5.Vector) {\n        var desired = P5.Vector.sub(this.position, target);\n        desired.normalize();\n        desired.mult(window.params.MaxSpeed);\n        var steer = P5.Vector.sub(desired, this.velocity);\n        steer.limit(window.params.MaxForce);\n        return steer;\n    }\n\n    GetSteeringForces(boids: Array<Boid>) {\n        var align = this.AlignmentForce(boids);\n        var repulsion = this.RepulsionForce(boids);\n        var cohesion = this.CohesionForce(boids);\n        var force = this.p5.createVector(0, 0);\n        force.add(align);\n        force.add(repulsion);\n        force.add(cohesion);\n        return force;\n    }\n}\n","import P5 from 'p5';\nimport params from './params';\nimport Boid from './boid';\nexport default class Simulation {\n    boids: Array<Boid> = [];\n    p5: P5;\n\n    constructor(p5: P5) {\n        this.p5 = p5;\n    }\n\n    run() {\n        this.boids.forEach((boid) => {\n            // apply physics\n            let force = boid.GetSteeringForces(this.boids);\n            boid.step(force);\n            // Draw things\n            boid.draw();\n        });\n    }\n\n    drawLines(boid: Boid, boids: Array<Boid>) {\n        boids.forEach((otherboid) => {\n            let d = P5.Vector.dist(otherboid.position, boid.position);\n            if (d < window.params.lineMaxDist) {\n                this.p5.stroke(\n                    this.p5.color(\n                        0,\n                        255,\n                        0,\n                        this.p5.map(d, 0, window.params.lineMaxDist, 255, 0)\n                    )\n                );\n                this.p5.strokeWeight(\n                    this.p5.map(d, 0, window.params.lineMaxDist, 2, 0)\n                );\n                this.p5.line(\n                    boid.position.x,\n                    boid.position.y,\n                    otherboid.position.x,\n                    otherboid.position.y\n                );\n            }\n        });\n    }\n\n    addNewboid() {\n        if (this.boids.length < window.params.MaxPopulation) {\n            let boid = new Boid(this.p5);\n            this.boids.push(boid);\n        }\n    }\n}\n","import P5 from 'p5';\nimport Params from './params';\nimport Simulation from './simulation';\nwindow.params = new Params();\nconst sketch = (p5: P5) => {\n    var is_canvas_infocus = false;\n    var simulation = new Simulation(p5);\n    window.simulation = simulation;\n    p5.setup = () => {\n        var cnv = p5.createCanvas(p5.windowWidth, p5.windowHeight);\n        cnv.mouseOver(() => {\n            is_canvas_infocus = true;\n        });\n        cnv.mouseOut(() => {\n            is_canvas_infocus = false;\n        });\n        cnv.style('display', 'block');\n        cnv.parent('sketch-holder');\n        for (let i = 0; i < window.params.InitialPopulation; i++) {\n            simulation.addNewboid();\n        }\n    };\n\n    p5.windowResized = () => {\n        p5.resizeCanvas(p5.windowWidth, p5.windowHeight);\n    };\n\n    p5.draw = () => {\n        p5.background(255, 255, 255);\n        simulation.run();\n    };\n};\nnew P5(sketch);\n"],"names":["$0be4d37ff8450000$export$2e2bcd8739ae039","this","boidSize","lineMaxDist","WallThickness","WallBuffer","InitialPopulation","MaxPopulation","MaxSpeed","MinSpeed","MaxForce","SeperationWeight","AlignmentWeight","CohesionWeight","SphereOfInfluence","CohesionNeighborhood","DesiredSeperation","$f02121749b70eb5d$export$2e2bcd8739ae039","p5","color","Math","random","mass","draw","position","angle","push","translate","x","y","rotate","len","fill","line","ellipse","pop","$64d8c609b1f2a9f4$export$2e2bcd8739ae039","createVector","windowWidth","windowHeight","heading","PI","velocity","cos","sin","normalize","mult","window","params","shape","map","value","step","force","acceleration","$parcel$interopDefault","$7Pz0b","Vector","add","mag","limit","warpWorld","wx","wy","b","getDistanceFrom","target","distance","dist","p2","distance2","min","AlignmentForce","boids","averageVelocity","count","forEach","boid","d","div","steer","sub","CohesionForce","centerOfGravity","v","Seek","RepulsionForce","away","desired","Flee","GetSteeringForces","align","repulsion","cohesion","$a5e6915164db9a3c$export$2e2bcd8739ae039","run","drawLines","otherboid","stroke","strokeWeight","addNewboid","length","simulation","setup","cnv","createCanvas","mouseOver","mouseOut","style","parent","i","windowResized","resizeCanvas","background"],"version":3,"file":"sketch.6f4e1d47.js.map"}