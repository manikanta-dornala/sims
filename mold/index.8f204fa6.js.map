{"mappings":"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","sources":["<anon>","mold/app.tsx","mold/sktech.ts"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire5b7a\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire5b7a\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nlet $8c8568468b6a3884$var$buffer = 60;\nconst $8c8568468b6a3884$export$d038dabfbf61338f = ()=>{\n    return (p5)=>{\n        var is_canvas_infocus = false;\n        let num = 5000;\n        let molds = [];\n        p5.setup = ()=>{\n            var cnv = p5.createCanvas(p5.windowWidth, p5.windowHeight - $8c8568468b6a3884$var$buffer);\n            p5.angleMode(p5.DEGREES);\n            // p5.randomSeed(42);\n            for(let i = 0; i < num; i++)molds[i] = new $8c8568468b6a3884$var$Mold(p5.random(0.1 * p5.width, 0.9 * p5.width), p5.random(0.1 * p5.height, 0.9 * p5.height), p5);\n            cnv.style(\"display\", \"block\");\n            cnv.parent(\"sketch-holder\");\n        };\n        p5.windowResized = ()=>{\n            p5.resizeCanvas(p5.windowWidth, p5.windowHeight - $8c8568468b6a3884$var$buffer);\n        };\n        p5.draw = ()=>{\n            p5.background(0, 5);\n            p5.loadPixels();\n            for(let c = 0; c < 5; c++)for(let i = 0; i < num; i++){\n                molds[i].update();\n                molds[i].display();\n            }\n        };\n    };\n};\nclass $8c8568468b6a3884$var$Mold {\n    constructor(x, y, p5){\n        this.r = 1;\n        this.sensorAngle = 60;\n        this.sensorDist = 20;\n        this.x = x;\n        this.y = y;\n        this.p5 = p5;\n        this.vx = this.p5.cos(this.heading);\n        this.vy = this.p5.sin(this.heading);\n        this.heading = this.p5.random() * 360;\n        this.rotAngle = 30;\n    }\n    display() {\n        this.p5.noStroke();\n        this.p5.fill(255);\n        this.p5.ellipse(this.x, this.y, this.r, this.r);\n    }\n    update() {\n        this.updatePos();\n        this.updateHeading();\n    }\n    updatePos() {\n        let randomheading = this.p5.random(-0.1, 0.1);\n        let heading = this.heading * (1 + randomheading);\n        this.vx = this.p5.cos(heading);\n        this.vy = this.p5.sin(heading);\n        // Using % Modulo expression to wrap around the canvas\n        this.x = (this.x + this.vx + this.p5.width) % this.p5.width;\n        this.y = (this.y + this.vy + this.p5.height) % this.p5.height;\n    }\n    updateHeading() {\n        let r = this.getValue(this.sensorAngle);\n        let l = this.getValue(-this.sensorAngle);\n        let f = this.getValue(0);\n        let rotAngleRandom = 5;\n        let rotAngle = this.p5.random(this.rotAngle - rotAngleRandom, this.rotAngle + rotAngleRandom);\n        if (f > l && f > r) this.heading += 0;\n        else if (f < l && f < r) {\n            if (this.p5.random(1) < 0.5) this.heading += rotAngle;\n            else this.heading -= rotAngle;\n        } else if (l > r) this.heading += -rotAngle;\n        else if (r > l) this.heading += rotAngle;\n    }\n    getValue(sensorHead) {\n        let sensorX = (this.x + this.sensorDist * this.p5.cos(this.heading + sensorHead)) % this.p5.width;\n        let sensorY = (this.y + this.p5.height + this.sensorDist * this.p5.sin(this.heading + sensorHead)) % this.p5.height;\n        let d = this.p5.pixelDensity();\n        let index = 4 * (d * this.p5.floor(sensorY)) * (d * this.p5.width) + 4 * (d * this.p5.floor(sensorX));\n        let value = this.p5.pixels[index];\n        return value;\n    }\n}\n\n\n\nvar $7Pz0b = parcelRequire(\"7Pz0b\");\nnew (0, (/*@__PURE__*/$parcel$interopDefault($7Pz0b)))((0, $8c8568468b6a3884$export$d038dabfbf61338f)());\n\n\n//# sourceMappingURL=index.8f204fa6.js.map\n","import { sketch } from './sktech';\nimport P5 from 'p5';\n\nnew P5(sketch());\n","import P5 from 'p5';\nlet buffer = 60;\nexport const sketch = () => {\n    return (p5: P5) => {\n        var is_canvas_infocus = false;\n        let num = 5000;\n        let molds: Array<Mold> = [];\n        p5.setup = () => {\n            var cnv = p5.createCanvas(p5.windowWidth, p5.windowHeight - buffer);\n\n            p5.angleMode(p5.DEGREES);\n\n            // p5.randomSeed(42);\n\n            for (let i = 0; i < num; i++) {\n                molds[i] = new Mold(\n                    p5.random(0.1 * p5.width, 0.9 * p5.width),\n                    p5.random(0.1 * p5.height, 0.9 * p5.height),\n                    p5\n                );\n            }\n\n            cnv.style('display', 'block');\n            cnv.parent('sketch-holder');\n        };\n\n        p5.windowResized = () => {\n            p5.resizeCanvas(p5.windowWidth, p5.windowHeight - buffer);\n        };\n\n        p5.draw = () => {\n            p5.background(0, 5);\n            p5.loadPixels();\n            for (let c = 0; c < 5; c++) {\n                for (let i = 0; i < num; i++) {\n                    molds[i].update();\n                    molds[i].display();\n                }\n            }\n        };\n    };\n};\n\nclass Mold {\n    x: number;\n    y: number;\n    r: number = 1;\n    heading: number;\n    rotAngle: number;\n    vx: number;\n    vy: number;\n\n    sensorAngle = 60;\n    sensorDist = 20;\n\n    p5: P5;\n    constructor(x, y, p5) {\n        this.x = x;\n        this.y = y;\n        this.p5 = p5;\n        this.vx = this.p5.cos(this.heading);\n        this.vy = this.p5.sin(this.heading);\n        this.heading = this.p5.random() * 360;\n        this.rotAngle = 30;\n    }\n\n    display() {\n        this.p5.noStroke();\n        this.p5.fill(255);\n        this.p5.ellipse(this.x, this.y, this.r, this.r);\n    }\n\n    update() {\n        this.updatePos();\n        this.updateHeading();\n    }\n\n    updatePos() {\n        let randomheading = this.p5.random(-0.1, 0.1);\n        let heading = this.heading * (1 + randomheading);\n        this.vx = this.p5.cos(heading);\n        this.vy = this.p5.sin(heading);\n\n        // Using % Modulo expression to wrap around the canvas\n        this.x = (this.x + this.vx + this.p5.width) % this.p5.width;\n        this.y = (this.y + this.vy + this.p5.height) % this.p5.height;\n    }\n\n    updateHeading() {\n        let r = this.getValue(this.sensorAngle);\n        let l = this.getValue(-this.sensorAngle);\n        let f = this.getValue(0);\n\n        let rotAngleRandom = 5;\n        let rotAngle = this.p5.random(\n            this.rotAngle - rotAngleRandom,\n            this.rotAngle + rotAngleRandom\n        );\n        if (f > l && f > r) {\n            this.heading += 0;\n        } else if (f < l && f < r) {\n            if (this.p5.random(1) < 0.5) {\n                this.heading += rotAngle;\n            } else {\n                this.heading -= rotAngle;\n            }\n        } else if (l > r) {\n            this.heading += -rotAngle;\n        } else if (r > l) {\n            this.heading += rotAngle;\n        }\n    }\n\n    getValue(sensorHead) {\n        let sensorX =\n            (this.x +\n                this.sensorDist * this.p5.cos(this.heading + sensorHead)) %\n            this.p5.width;\n        let sensorY =\n            (this.y +\n                this.p5.height +\n                this.sensorDist * this.p5.sin(this.heading + sensorHead)) %\n            this.p5.height;\n\n        let d = this.p5.pixelDensity();\n        let index =\n            4 * (d * this.p5.floor(sensorY)) * (d * this.p5.width) +\n            4 * (d * this.p5.floor(sensorX));\n        let value = this.p5.pixels[index];\n        return value;\n    }\n}\n"],"names":["a","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$8c8568468b6a3884$var$Mold","constructor","x","y","p5","r","sensorAngle","sensorDist","vx","cos","heading","vy","sin","random","rotAngle","display","noStroke","fill","ellipse","update","updatePos","updateHeading","randomheading","width","height","getValue","l","f","sensorHead","sensorX","sensorY","d","pixelDensity","index","floor","pixels","__esModule","default","molds","setup","cnv","createCanvas","windowWidth","windowHeight","angleMode","DEGREES","i","style","parent","windowResized","resizeCanvas","draw","background","loadPixels","c"],"version":3,"file":"index.8f204fa6.js.map"}