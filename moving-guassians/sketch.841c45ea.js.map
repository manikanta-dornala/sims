{"mappings":"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","sources":["moving-guassians/params.ts","moving-guassians/simulation.ts","moving-guassians/center.ts","moving-guassians/sketch.ts"],"sourcesContent":["export default class Params {\n    isPaused = false;\n    particleSize = 5;\n    lineMaxDist = 150;\n    WallThickness = 0;\n    WallBuffer = 50;\n    InitialPopulation = 160;\n    MaxSpeed = 10;\n    MinSpeed = 8;\n    MaxForce = 0.2;\n}\n","import P5, { Color } from 'p5';\nimport Center from './center';\nvar startTime, endTime;\n\nfunction start() {\n    startTime = new Date();\n}\n\nfunction end() {\n    endTime = new Date();\n    var timeDiff = endTime - startTime; //in ms\n    // strip the ms\n    timeDiff /= 1000;\n\n    // get seconds\n    var seconds = Math.round(timeDiff);\n    console.log(timeDiff + ' seconds');\n}\nexport default class Simulation {\n    p5: P5;\n    img: P5.Image;\n    centers: Array<Center> = [];\n    constructor(p5: P5) {\n        this.p5 = p5;\n        for (let i = 0; i < 5; i++) {\n            let particle = new Center(this.p5);\n            particle.amplitude = 5;\n            particle.sigma = p5.createVector(20, 20);\n            this.centers.push(particle);\n        }\n        this.img = this.p5.createImage(\n            this.p5.windowWidth,\n            this.p5.windowHeight\n        );\n        this.img.loadPixels();\n    }\n    run() {\n        this.centers.forEach((center) => {\n            if (this.p5.frameCount % 2 != 0) center.draw();\n            center.step(this.p5.createVector(Math.random(), Math.random()));\n        });\n        if (this.p5.frameCount % 2 != 0) this.updateBackground();\n    }\n\n    updateBackground() {\n        // this.p5.createCanvas(this.p5.windowWidth, this.p5.windowHeight);\n        // this.p5.background(220, 255, 220);\n        // helper for writing color to array\n        function writeColor(\n            image: P5.Image,\n            position: { x; y },\n            color: { r; g; b; a }\n        ) {\n            let index = (position.x + position.y * image.width) * 4;\n            image.pixels[index] = color.r;\n            image.pixels[index + 1] = color.g;\n            image.pixels[index + 2] = color.b;\n            image.pixels[index + 3] = color.a;\n        }\n\n        let x, y;\n        start();\n        // fill with random colors\n        for (y = 0; y < this.img.height; y++) {\n            for (x = 0; x < this.img.width; x++) {\n                let c = this.p5.map(this.getColor({ x, y }), 0, 1, 0, 255);\n                writeColor(this.img, { x, y }, { r: 255, g: c, b: c, a: 255 });\n            }\n        }\n        end();\n\n        this.img.updatePixels();\n        this.p5.image(this.img, 0, 0);\n    }\n\n    getColor(position: { x; y }) {\n        function f(point: P5.Vector, guassian: Center) {\n            return (\n                guassian.amplitude *\n                Math.exp(\n                    (-0.5 * point.dist(guassian.position) ** 2) /\n                        guassian.sigma.x ** 2\n                )\n            );\n        }\n\n        let result = 0;\n        let p = this.p5.createVector(position.x, position.y);\n        this.centers.forEach((center) => {\n            result += f(p, center);\n        });\n        return result / this.centers.length;\n    }\n}\n","import P5 from 'p5';\nimport params from './params';\nexport default class Center {\n    amplitude: number;\n    sigma: P5.Vector;\n    mass: number;\n    color: P5.Color;\n    position: P5.Vector;\n    velocity: P5.Vector;\n    size: number;\n    heading: number;\n    p5: P5;\n    constructor(p5: P5) {\n        this.p5 = p5;\n        this.position = this.p5.createVector(\n            Math.random() * p5.windowWidth,\n            Math.random() * p5.windowHeight\n        );\n        this.heading = Math.random() * 2 * this.p5.PI;\n        this.velocity = this.p5\n            .createVector(this.p5.cos(this.heading), this.p5.sin(this.heading))\n            .normalize()\n            .mult(window.params.MaxSpeed * Math.random());\n        this.color = this.p5.color(\n            Math.random() * 255,\n            Math.random() * 255,\n            Math.random() * 255\n        );\n        this.size = 5;\n        this.mass = 1;\n    }\n\n    draw() {\n        this.p5.push();\n        this.p5.translate(this.position.x, this.position.y);\n        this.p5.fill(this.color);\n        this.p5.ellipse(0, 0, this.size, this.size);\n        this.p5.fill(0, 0, 0);\n        this.p5.pop();\n    }\n\n    step(force: P5.Vector) {\n        var acceleration = P5.Vector.mult(force, this.mass);\n        this.velocity.add(acceleration);\n        if (this.velocity.mag() < window.params.MinSpeed) {\n            this.velocity.normalize();\n            this.velocity.mult(window.params.MinSpeed);\n        }\n        this.velocity.limit(window.params.MaxSpeed);\n        this.position.add(this.velocity);\n        this.warpWorld();\n    }\n\n    warpWorld() {\n        var wx = this.p5.windowWidth;\n        var wy = this.p5.windowHeight;\n        var b = window.params.WallBuffer;\n        if (this.position.x < b) {\n            this.position.x = wx - 1.1 * b;\n        } else if (this.position.x > wx - b) {\n            this.position.x = 1.1 * b;\n        }\n\n        if (this.position.y < b) {\n            this.position.y = wy - 1.1 * b;\n        } else if (this.position.y > wy - b) {\n            this.position.y = 1.1 * b;\n        }\n    }\n}\n","import P5 from 'p5';\nimport Params from './params';\nimport Simulation from './simulation';\nconst sketch = (p5: P5) => {\n    let is_canvas_infocus = false;\n    let params = new Params();\n    window.params = params;\n    let simulation = new Simulation(p5);\n    window.simulation = simulation;\n    window.p5 = p5;\n    p5.setup = () => {\n        var cnv = p5.createCanvas(p5.windowWidth, p5.windowHeight);\n        cnv.mouseOver(() => {\n            is_canvas_infocus = true;\n        });\n        cnv.mouseOut(() => {\n            is_canvas_infocus = false;\n        });\n        cnv.style('display', 'block');\n        cnv.parent('sketch-holder');\n    };\n\n    p5.windowResized = () => {\n        p5.resizeCanvas(p5.windowWidth, p5.windowHeight);\n    };\n\n    p5.draw = () => {\n        simulation.run();\n    };\n};\n\nnew P5(sketch);\n"],"names":["$62d6d1c86c6e3384$export$2e2bcd8739ae039","this","isPaused","particleSize","lineMaxDist","WallThickness","WallBuffer","InitialPopulation","MaxSpeed","MinSpeed","MaxForce","$88ff0517c5f30ed1$var$startTime","$4358c15e6de98231$export$2e2bcd8739ae039","p5","position","createVector","Math","random","windowWidth","windowHeight","heading","PI","velocity","cos","sin","normalize","mult","window","params","color","size","mass","draw","push","translate","x","y","fill","ellipse","pop","step","force","acceleration","$parcel$interopDefault","$7Pz0b","Vector","add","mag","limit","warpWorld","wx","wy","b","$88ff0517c5f30ed1$export$2e2bcd8739ae039","centers","i","particle","amplitude","sigma","img","createImage","loadPixels","run","forEach","center","frameCount","updateBackground","writeColor","image","index","width","pixels","r","g","a","Date","height","c","map","getColor","timeDiff","round","console","log","updatePixels","result","p","point","guassian","exp","dist","length","is_canvas_infocus","simulation","setup","cnv","createCanvas","mouseOver","mouseOut","style","parent","windowResized","resizeCanvas"],"version":3,"file":"sketch.841c45ea.js.map"}