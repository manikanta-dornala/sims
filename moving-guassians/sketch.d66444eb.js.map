{"mappings":"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","sources":["moving-guassians/params.ts","moving-guassians/center.ts","moving-guassians/simulation.ts","moving-guassians/sketch.ts"],"sourcesContent":["export default class Params {\n    isPaused = false;\n    particleSize = 5;\n    lineMaxDist = 150;\n    WallThickness = 0;\n    WallBuffer = 50;\n    InitialPopulation = 160;\n    MaxSpeed = 10;\n    MinSpeed = 8;\n    MaxForce = 0.2;\n}\n","import P5 from 'p5';\nimport params from './params';\nexport default class GuassianCenter {\n    amplitude: number;\n    sigma: P5.Vector;\n    mass: number;\n    color: P5.Color;\n    position: P5.Vector;\n    velocity: P5.Vector;\n    size: number;\n    heading: number;\n    p5: P5;\n    constructor(p5: P5) {\n        this.p5 = p5;\n        this.position = this.p5.createVector(\n            Math.random() * p5.windowWidth,\n            Math.random() * p5.windowHeight\n        );\n        this.heading = Math.random() * 2 * this.p5.PI;\n        this.velocity = this.p5\n            .createVector(this.p5.cos(this.heading), this.p5.sin(this.heading))\n            .normalize()\n            .mult(window.params.MaxSpeed * Math.random());\n        this.color = this.p5.color(\n            Math.random() * 255,\n            Math.random() * 255,\n            Math.random() * 255\n        );\n        this.size = 5;\n        this.mass = 1;\n        this.sigma = this.p5.createVector(this.p5.random(30, 50));\n        this.amplitude = this.p5.random(4,5)\n    }\n\n    draw() {\n        this.p5.push();\n        this.p5.translate(this.position.x, this.position.y);\n        this.p5.fill(this.color);\n        this.p5.ellipse(0, 0, this.size, this.size);\n        this.p5.fill(0, 0, 0);\n        this.p5.pop();\n    }\n\n    step(force: P5.Vector) {\n        var acceleration = P5.Vector.mult(force, this.mass);\n        this.velocity.add(acceleration);\n        if (this.velocity.mag() < window.params.MinSpeed) {\n            this.velocity.normalize();\n            this.velocity.mult(window.params.MinSpeed);\n        }\n        this.velocity.limit(window.params.MaxSpeed);\n        this.position.add(this.velocity);\n        this.warpWorld();\n    }\n\n    warpWorld() {\n        var wx = this.p5.windowWidth;\n        var wy = this.p5.windowHeight;\n        var b = window.params.WallBuffer;\n        if (this.position.x < b) {\n            this.position.x = wx - 1.1 * b;\n        } else if (this.position.x > wx - b) {\n            this.position.x = 1.1 * b;\n        }\n\n        if (this.position.y < b) {\n            this.position.y = wy - 1.1 * b;\n        } else if (this.position.y > wy - b) {\n            this.position.y = 1.1 * b;\n        }\n    }\n}\n","import P5, { Color } from 'p5';\nimport GuassianCenter from './center';\nvar startTime, endTime;\n\nfunction start() {\n    startTime = new Date();\n}\n\nfunction end() {\n    endTime = new Date();\n    var timeDiff = endTime - startTime; //in ms\n    timeDiff /= 1000;\n}\nexport default class Simulation {\n    p5: P5;\n    img: P5.Image;\n    centers: Array<GuassianCenter> = [];\n    constructor(p5: P5) {\n        this.p5 = p5;\n        for (let i = 0; i < 5; i++) {\n            let particle = new GuassianCenter(this.p5);\n            this.centers.push(particle);\n        }\n        this.img = this.p5.createImage(\n            this.p5.windowWidth,\n            this.p5.windowHeight\n        );\n        this.img.loadPixels();\n    }\n    run() {\n        this.centers.forEach((center) => {\n            center.draw();\n            center.step(this.p5.createVector(Math.random(), Math.random()));\n        });\n        this.updateBackground();\n    }\n\n    updateBackground() {\n        let x, y;\n        start();\n        for (y = 0; y < this.img.height; y++) {\n            for (x = 0; x < this.img.width; x++) {\n                let c = this.p5.map(this.getColor(x, y), 0, 1, 0, 255);\n                let index = (x + y * this.img.width) * 4;\n                this.img.pixels[index] = 255;\n                this.img.pixels[index + 1] = c;\n                this.img.pixels[index + 2] = c;\n                this.img.pixels[index + 3] = 255;\n            }\n        }\n        end();\n\n        this.img.updatePixels();\n        this.p5.image(this.img, 0, 0);\n    }\n\n    getColor(x, y) {\n        let result = 0;\n        this.centers.forEach((center) => {\n            result +=\n                center.amplitude *\n                Math.exp(\n                    ((-0.5 * 1) / center.sigma.x ** 2) *\n                        ((x - center.position.x) ** 2 +\n                            (y - center.position.y) ** 2)\n                );\n        });\n        return result / this.centers.length;\n    }\n}\n","import P5 from 'p5';\nimport Params from './params';\nimport Simulation from './simulation';\nconst sketch = (p5: P5) => {\n    let is_canvas_infocus = false;\n    let params = new Params();\n    window.params = params;\n    let simulation = new Simulation(p5);\n    window.simulation = simulation;\n    window.p5 = p5;\n    p5.setup = () => {\n        var cnv = p5.createCanvas(p5.windowWidth, p5.windowHeight);\n        cnv.mouseOver(() => {\n            is_canvas_infocus = true;\n        });\n        cnv.mouseOut(() => {\n            is_canvas_infocus = false;\n        });\n        cnv.style('display', 'block');\n        cnv.parent('sketch-holder');\n    };\n\n    p5.windowResized = () => {\n        p5.resizeCanvas(p5.windowWidth, p5.windowHeight);\n    };\n\n    p5.draw = () => {\n        simulation.run();\n    };\n};\n\nnew P5(sketch);\n"],"names":["$62d6d1c86c6e3384$export$2e2bcd8739ae039","this","isPaused","particleSize","lineMaxDist","WallThickness","WallBuffer","InitialPopulation","MaxSpeed","MinSpeed","MaxForce","$4358c15e6de98231$export$2e2bcd8739ae039","p5","position","createVector","Math","random","windowWidth","windowHeight","heading","PI","velocity","cos","sin","normalize","mult","window","params","color","size","mass","sigma","amplitude","draw","push","translate","x","y","fill","ellipse","pop","step","force","acceleration","$parcel$interopDefault","$7Pz0b","Vector","add","mag","limit","warpWorld","wx","wy","b","$88ff0517c5f30ed1$export$2e2bcd8739ae039","centers","i","particle","img","createImage","loadPixels","run","forEach","center","updateBackground","Date","height","width","c","map","getColor","index","pixels","updatePixels","image","result","exp","length","is_canvas_infocus","simulation","setup","cnv","createCanvas","mouseOver","mouseOut","style","parent","windowResized","resizeCanvas"],"version":3,"file":"sketch.d66444eb.js.map"}