{"mappings":"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","sources":["<anon>","fractals/snowflake/sketch.ts"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire5b7a\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire5b7a\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\nvar $7Pz0b = parcelRequire(\"7Pz0b\");\nconst $ed4ae2586e3b5978$var$sketch = (p5)=>{\n    var is_canvas_infocus = false;\n    let points = [];\n    let numSegments = 8;\n    let rotationAngle = 0;\n    p5.setup = ()=>{\n        var cnv = p5.createCanvas(p5.windowWidth * 0.9, p5.windowHeight * 0.9);\n        cnv.mouseOver(()=>{\n            is_canvas_infocus = true;\n        });\n        cnv.mouseOut(()=>{\n            is_canvas_infocus = false;\n        });\n        cnv.style(\"display\", \"block\");\n        cnv.parent(\"sketch-holder\");\n        points = generateSnowflake(numSegments, p5.height / 3);\n    };\n    p5.windowResized = ()=>{\n        p5.resizeCanvas(p5.windowWidth * 0.9, p5.windowHeight * 0.9);\n    };\n    function drawPoints(points, x, y) {\n        p5.beginShape();\n        p5.strokeWeight(8);\n        for(let i = 0; i < points.length; i++){\n            const point = points[i];\n            p5.vertex(x + point.x, y + point.y);\n        }\n        p5.endShape(p5.CLOSE);\n    }\n    function pointsForSegment(numSegments, radius) {\n        const numPointsInSeg = p5.int(p5.random(4, 10));\n        const segmentPoints = [];\n        const segmentAngle = p5.PI / numSegments;\n        for(let i = 0; i < numPointsInSeg; i++){\n            const a = p5.random(segmentAngle);\n            const r = p5.random(radius);\n            segmentPoints.push(p5.createVector(r * p5.cos(a), r * p5.sin(a)));\n        }\n        // Reflect the points by flipping the angle\n        for(let i = numPointsInSeg - 1; i >= 0; i--){\n            const point = segmentPoints[i];\n            segmentPoints.push(p5.createVector(point.x, -point.y));\n        }\n        return segmentPoints;\n    }\n    function snowflakeFromSegment(numSegments, segmentPoints) {\n        const points = [];\n        for(let i = 0; i < numSegments; i++){\n            let ang = i * p5.TWO_PI / numSegments;\n            for(let j = 0; j < segmentPoints.length; j++){\n                const point = segmentPoints[j];\n                const r = point.mag();\n                const a = p5.atan2(point.y, point.x) + ang;\n                const x = p5.cos(a) * r;\n                const y = p5.sin(a) * r;\n                points.push(p5.createVector(x, y));\n            }\n        }\n        return points;\n    }\n    function generateSnowflake(numSegments, radius) {\n        const segmentPoints = pointsForSegment(numSegments, radius);\n        return snowflakeFromSegment(numSegments, segmentPoints);\n    }\n    p5.draw = ()=>{\n        p5.background(255);\n        p5.fill(255, 255, 255);\n        rotationAngle += p5.PI / 10;\n        drawPoints(points, p5.width / 2, p5.height / 2);\n        if (p5.frameCount % 90 == 0) points = generateSnowflake(numSegments, p5.height / 3);\n    };\n};\nnew (0, (/*@__PURE__*/$parcel$interopDefault($7Pz0b)))($ed4ae2586e3b5978$var$sketch);\n\n\n//# sourceMappingURL=index.a5f1a257.js.map\n","import P5 from 'p5';\n\nconst sketch = (p5: P5) => {\n    var is_canvas_infocus = false;\n    let points = [];\n    let numSegments = 8;\n    let rotationAngle = 0;\n    p5.setup = () => {\n        var cnv = p5.createCanvas(p5.windowWidth * 0.9, p5.windowHeight * 0.9);\n        cnv.mouseOver(() => {\n            is_canvas_infocus = true;\n        });\n        cnv.mouseOut(() => {\n            is_canvas_infocus = false;\n        });\n        cnv.style('display', 'block');\n        cnv.parent('sketch-holder');\n        points = generateSnowflake(numSegments, p5.height / 3);\n    };\n\n    p5.windowResized = () => {\n        p5.resizeCanvas(p5.windowWidth * 0.9, p5.windowHeight * 0.9);\n    };\n\n    function drawPoints(points, x, y) {\n        p5.beginShape();\n        p5.strokeWeight(8);\n        for (let i = 0; i < points.length; i++) {\n            const point = points[i];\n            p5.vertex(x + point.x, y + point.y);\n        }\n        p5.endShape(p5.CLOSE);\n    }\n\n    function pointsForSegment(numSegments: number, radius: number) {\n        const numPointsInSeg = p5.int(p5.random(4, 10));\n        const segmentPoints = [];\n\n        const segmentAngle = p5.PI / numSegments;\n\n        for (let i = 0; i < numPointsInSeg; i++) {\n            const a = p5.random(segmentAngle);\n            const r = p5.random(radius);\n            segmentPoints.push(p5.createVector(r * p5.cos(a), r * p5.sin(a)));\n        }\n\n        // Reflect the points by flipping the angle\n        for (let i = numPointsInSeg - 1; i >= 0; i--) {\n            const point = segmentPoints[i];\n            segmentPoints.push(p5.createVector(point.x, -point.y));\n        }\n\n        return segmentPoints;\n    }\n\n    function snowflakeFromSegment(numSegments, segmentPoints) {\n        const points = [];\n        for (let i = 0; i < numSegments; i++) {\n            let ang = (i * p5.TWO_PI) / numSegments;\n\n            for (let j = 0; j < segmentPoints.length; j++) {\n                const point = segmentPoints[j];\n                const r = point.mag();\n                const a = p5.atan2(point.y, point.x) + ang;\n                const x = p5.cos(a) * r;\n                const y = p5.sin(a) * r;\n                points.push(p5.createVector(x, y));\n            }\n        }\n        return points;\n    }\n\n    function generateSnowflake(numSegments, radius) {\n        const segmentPoints = pointsForSegment(numSegments, radius);\n        return snowflakeFromSegment(numSegments, segmentPoints);\n    }\n\n    p5.draw = () => {\n        p5.background(255);\n        p5.fill(255, 255, 255);\n        rotationAngle += p5.PI / 10;\n        drawPoints(points, p5.width / 2, p5.height / 2);\n        if (p5.frameCount % 90 == 0) {\n            points = generateSnowflake(numSegments, p5.height / 3);\n        }\n    };\n};\n\nnew P5(sketch);\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$7Pz0b","a","__esModule","default","p5","points","rotationAngle","generateSnowflake","numSegments","radius","segmentPoints","pointsForSegment","numPointsInSeg","int","random","segmentAngle","PI","i","r","push","createVector","cos","sin","point","x","y","snowflakeFromSegment","ang","TWO_PI","j","length","mag","atan2","setup","cnv","createCanvas","windowWidth","windowHeight","mouseOver","mouseOut","style","parent","height","windowResized","resizeCanvas","draw","background","fill","drawPoints","beginShape","strokeWeight","vertex","endShape","CLOSE","width","frameCount"],"version":3,"file":"index.a5f1a257.js.map"}