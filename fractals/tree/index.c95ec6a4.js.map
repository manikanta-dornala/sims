{"mappings":"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","sources":["<anon>","fractals/tree/app.tsx","fractals/tree/simulation.ts","fractals/tree/sktech.ts"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire5b7a\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire5b7a\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nclass $2c3dc6daa6eee50a$export$2e2bcd8739ae039 {\n    constructor(){\n        this.shrink = 0.66;\n        this.angle = 30;\n        this.minLength = 12;\n        this.branches = 5;\n        this.randomSeed = 42;\n    }\n    setup(p5) {\n        this.p5 = p5;\n        this.p5.angleMode(this.p5.DEGREES);\n        this.randomSeed = Math.random() * 1000;\n    }\n    run() {\n        this.p5.randomSeed(this.randomSeed);\n        this.p5.background(255);\n        this.p5.translate(this.p5.width * 0.5, this.p5.height * 0.7);\n        this.startLength = Math.min(this.p5.height, this.p5.width) * 0.2;\n        this.branch(this.startLength);\n    }\n    branch(len) {\n        if (this.p5.random() < this.p5.map(len, this.minLength, this.startLength, 0.05, 0.1)) len = this.minLength;\n        else {\n            this.drawBranch(len);\n            if (len <= this.minLength) {\n                this.drawLeaf();\n                return;\n            }\n            len = len * this.shrink;\n        }\n        var branches = Math.ceil(this.p5.map(len, this.minLength, this.startLength, 2, this.branches));\n        for(var i = 0; i < branches; i++){\n            var angle = this.angle * this.p5.map(i, 0, branches - 1, -Math.ceil(branches / 2), Math.ceil(branches / 2));\n            angle = angle + this.angle * this.p5.map(this.p5.random(), 0, 1, -1, 1);\n            this.p5.push();\n            this.p5.rotate(angle);\n            this.branch(len);\n            this.p5.pop();\n        }\n        if (len > 2 * this.minLength) for(var k = 0; k < 5; k++){\n            this.p5.push();\n            this.p5.rotate(this.angle * this.p5.map(this.p5.random(), 0, 1, 1, 10));\n            this.drawBranch(this.minLength * 0.8);\n            this.drawLeaf();\n            this.p5.pop();\n        }\n    }\n    drawBranch(len) {\n        len = len * this.p5.map(this.p5.random(), 0, 1, 0.9, 1.08);\n        this.p5.strokeWeight(this.p5.map(len, this.minLength, this.startLength, 1, 12));\n        const alpha = this.p5.map(len, this.minLength, this.startLength, 150, 255);\n        this.p5.stroke(150, 150, 100, alpha);\n        this.p5.line(0, 0, 0, -len);\n        this.p5.translate(0, -len);\n    }\n    drawLeaf(size = 10) {\n        this.p5.beginShape();\n        size = size * this.p5.map(this.p5.random(), 0, 1, 0.5, 2);\n        this.p5.noStroke();\n        const r = 0;\n        const g = this.p5.map(this.p5.random(), 0, 1, 200, 255);\n        const b = 0;\n        const alpha = 255 * this.p5.map(this.p5.random(), 0, 1, 0.9, 1.8);\n        this.p5.fill(r, g, b, alpha);\n        this.p5.ellipse(0, 0, size * 0.7, size);\n        if (this.p5.random() < 0.005) {\n            this.p5.fill(200, 100, 150, 255);\n            this.p5.ellipse(0, 0, size, size);\n        }\n        this.p5.endShape();\n    }\n}\n\n\nconst $049ee1f5552c416c$export$d038dabfbf61338f = (simulation)=>{\n    return (p5)=>{\n        var is_canvas_infocus = false;\n        p5.setup = ()=>{\n            var cnv = p5.createCanvas(p5.windowWidth, p5.windowHeight);\n            cnv.mouseOver(()=>{\n                is_canvas_infocus = true;\n            });\n            cnv.mouseOut(()=>{\n                is_canvas_infocus = false;\n            });\n            simulation.setup(p5);\n            p5.noLoop();\n        };\n        p5.windowResized = ()=>{\n            p5.resizeCanvas(p5.windowWidth, p5.windowHeight);\n            simulation.run();\n        };\n        p5.draw = ()=>{\n            simulation.run();\n        };\n    };\n};\n\n\n\nvar $7Pz0b = parcelRequire(\"7Pz0b\");\nconst $ca6d10fd6406c495$var$simulation = new (0, $2c3dc6daa6eee50a$export$2e2bcd8739ae039)();\nnew (0, (/*@__PURE__*/$parcel$interopDefault($7Pz0b)))((0, $049ee1f5552c416c$export$d038dabfbf61338f)($ca6d10fd6406c495$var$simulation));\n\n\n//# sourceMappingURL=index.c95ec6a4.js.map\n","import Simulation from './simulation';\nimport { sketch } from './sktech';\nimport P5 from 'p5';\n\nconst simulation = new Simulation();\nnew P5(sketch(simulation));\n","import P5 from 'p5';\nexport default class Simulation {\n    p5: P5;\n    shrink = 0.66;\n    angle = 30;\n    minLength = 12;\n    branches = 5;\n    randomSeed = 42;\n    startLength;\n    constructor() {}\n\n    setup(p5: P5) {\n        this.p5 = p5;\n        this.p5.angleMode(this.p5.DEGREES);\n        this.randomSeed = Math.random() * 1000;\n    }\n\n    run() {\n        this.p5.randomSeed(this.randomSeed);\n        this.p5.background(255);\n        this.p5.translate(this.p5.width * 0.5, this.p5.height * 0.7);\n        this.startLength = Math.min(this.p5.height, this.p5.width) * 0.2;\n        this.branch(this.startLength);\n    }\n\n    branch(len) {\n        if (\n            this.p5.random() <\n            this.p5.map(len, this.minLength, this.startLength, 0.05, 0.1)\n        ) {\n            len = this.minLength;\n        } else {\n            this.drawBranch(len);\n            if (len <= this.minLength) {\n                this.drawLeaf();\n                return;\n            }\n            len = len * this.shrink;\n        }\n        var branches = Math.ceil(\n            this.p5.map(len, this.minLength, this.startLength, 2, this.branches)\n        );\n        for (var i = 0; i < branches; i++) {\n            var angle =\n                this.angle *\n                this.p5.map(\n                    i,\n                    0,\n                    branches - 1,\n                    -Math.ceil(branches / 2),\n                    Math.ceil(branches / 2)\n                );\n            angle =\n                angle + this.angle * this.p5.map(this.p5.random(), 0, 1, -1, 1);\n            this.p5.push();\n            this.p5.rotate(angle);\n            this.branch(len);\n            this.p5.pop();\n        }\n        if (len > 2 * this.minLength) {\n            for (var k = 0; k < 5; k++) {\n                this.p5.push();\n                this.p5.rotate(\n                    this.angle * this.p5.map(this.p5.random(), 0, 1, 1, 10)\n                );\n                this.drawBranch(this.minLength * 0.8);\n                this.drawLeaf();\n                this.p5.pop();\n            }\n        }\n    }\n\n    drawBranch(len) {\n        len = len * this.p5.map(this.p5.random(), 0, 1, 0.9, 1.08);\n        this.p5.strokeWeight(\n            this.p5.map(len, this.minLength, this.startLength, 1, 12)\n        );\n        const alpha = this.p5.map(\n            len,\n            this.minLength,\n            this.startLength,\n            150,\n            255\n        );\n        this.p5.stroke(150, 150, 100, alpha);\n        this.p5.line(0, 0, 0, -len);\n        this.p5.translate(0, -len);\n    }\n\n    drawLeaf(size = 10) {\n        this.p5.beginShape();\n        size = size * this.p5.map(this.p5.random(), 0, 1, 0.5, 2);\n        this.p5.noStroke();\n        const r = 0;\n        const g = this.p5.map(this.p5.random(), 0, 1, 200, 255);\n        const b = 0;\n        const alpha = 255 * this.p5.map(this.p5.random(), 0, 1, 0.9, 1.8);\n        this.p5.fill(r, g, b, alpha);\n        this.p5.ellipse(0, 0, size * 0.7, size);\n        if (this.p5.random() < 0.005) {\n            this.p5.fill(200, 100, 150, 255);\n            this.p5.ellipse(0, 0, size, size);\n        }\n\n        this.p5.endShape();\n    }\n}\n","import P5 from 'p5';\nimport Simulation from './simulation';\n\nexport const sketch = (simulation: Simulation) => {\n    return (p5: P5) => {\n        var is_canvas_infocus = false;\n        p5.setup = () => {\n            var cnv = p5.createCanvas(p5.windowWidth, p5.windowHeight);\n            cnv.mouseOver(() => {\n                is_canvas_infocus = true;\n            });\n            cnv.mouseOut(() => {\n                is_canvas_infocus = false;\n            });\n            simulation.setup(p5);\n            p5.noLoop();\n        };\n\n        p5.windowResized = () => {\n            p5.resizeCanvas(p5.windowWidth, p5.windowHeight);\n            simulation.run();\n        };\n\n        p5.draw = () => {\n            simulation.run();\n        };\n    };\n};\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$7Pz0b","$ca6d10fd6406c495$var$simulation","constructor","shrink","angle","minLength","branches","randomSeed","setup","p5","angleMode","DEGREES","Math","random","run","background","translate","width","height","startLength","min","branch","len","map","drawBranch","drawLeaf","ceil","i","push","rotate","pop","k","strokeWeight","alpha","stroke","line","size","beginShape","noStroke","g","fill","ellipse","endShape","a","__esModule","default","cnv","createCanvas","windowWidth","windowHeight","mouseOver","mouseOut","simulation","noLoop","windowResized","resizeCanvas","draw"],"version":3,"file":"index.c95ec6a4.js.map"}