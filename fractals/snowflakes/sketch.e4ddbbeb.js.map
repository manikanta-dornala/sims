{"mappings":"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","sources":["<anon>","fractals/snowflakes/params.ts","fractals/snowflakes/sketch.ts","fractals/snowflakes/snowflake.ts"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire5b7a\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire5b7a\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"jfXnV\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $8e0f9bafc82acf47$export$2e2bcd8739ae039);\nclass $8e0f9bafc82acf47$var$Params {\n    constructor(){\n        this.Segments = 6;\n    }\n}\nvar $8e0f9bafc82acf47$export$2e2bcd8739ae039 = $8e0f9bafc82acf47$var$Params;\n\n});\n\n\nvar $7Pz0b = parcelRequire(\"7Pz0b\");\n\nvar $jfXnV = parcelRequire(\"jfXnV\");\nclass $5be6f9265aaa6905$export$2e2bcd8739ae039 {\n    constructor(p5, num_segments){\n        this.p5 = p5;\n        this.num_segments = num_segments;\n        this.radius = 0;\n        this.seed = Math.random() * 1000;\n        this.p5.randomSeed(this.seed);\n        this.randomAngle = this.p5.random(0, this.p5.TWO_PI);\n    }\n    run() {\n        this.p5.randomSeed(this.seed);\n        const segmentPoints = this.pointsForSegment(this.num_segments, this.radius);\n        const points = this.snowflakeFromSegment(this.num_segments, segmentPoints);\n        this.drawPoints(points, this.p5.width / 2, this.p5.height / 2);\n        this.radius += 2;\n        this.randomAngle += this.p5.PI / 360;\n    }\n    drawPoints(points, x, y) {\n        this.p5.beginShape();\n        this.p5.stroke(255, 255, 255, this.p5.map(this.radius, 0, this.p5.width / 1.5, 255, 0));\n        this.p5.strokeWeight(4);\n        for(let i = 0; i < points.length; i++){\n            const point = points[i];\n            this.p5.vertex(x + point.x, y + point.y);\n        }\n        this.p5.endShape(this.p5.CLOSE);\n    }\n    pointsForSegment(numSegments, radius) {\n        const numPointsInSeg = this.p5.int(this.p5.random(4, 10));\n        const segmentPoints = [];\n        const segmentAngle = this.p5.PI / numSegments;\n        // Generate random points in half of the segment\n        // These are stored in polar coordinates\n        for(let i = 0; i < numPointsInSeg; i++){\n            const a = this.p5.random(segmentAngle);\n            const r = this.p5.random(0, radius * 2);\n            segmentPoints.push(this.p5.createVector(a, r));\n        }\n        // Reflect the points by flipping the angle\n        for(let i = numPointsInSeg - 1; i >= 0; i--){\n            const point = segmentPoints[i];\n            segmentPoints.push(this.p5.createVector(-point.x, point.y));\n        }\n        return segmentPoints;\n    }\n    snowflakeFromSegment(numSegments, segmentPoints) {\n        const points = [];\n        for(let i = 0; i < numSegments; i++){\n            const ang = i * this.p5.TWO_PI / numSegments;\n            for(let j = 0; j < segmentPoints.length; j++){\n                const point = segmentPoints[j];\n                const x = this.p5.cos(point.x + ang + this.randomAngle) * point.y;\n                const y = this.p5.sin(point.x + ang + this.randomAngle) * point.y;\n                points.push(this.p5.createVector(x, y));\n            }\n        }\n        return points;\n    }\n}\n\n\nconst $bfd13663790178f8$var$sketch = (p5)=>{\n    var is_canvas_infocus = false;\n    let points = [];\n    let rotationAngle = 0;\n    let params = new (0, $jfXnV.default)();\n    window.params = params;\n    let snowflakes;\n    p5.setup = ()=>{\n        var cnv = p5.createCanvas(p5.windowWidth * 0.9, p5.windowHeight * 0.9);\n        cnv.mouseOver(()=>{\n            is_canvas_infocus = true;\n        });\n        cnv.mouseOut(()=>{\n            is_canvas_infocus = false;\n        });\n        cnv.style(\"display\", \"block\");\n        cnv.parent(\"sketch-holder\");\n        snowflakes = [\n            new (0, $5be6f9265aaa6905$export$2e2bcd8739ae039)(p5, params.Segments)\n        ];\n    };\n    p5.windowResized = ()=>{\n        p5.resizeCanvas(p5.windowWidth * 0.9, p5.windowHeight * 0.9);\n    };\n    p5.draw = ()=>{\n        p5.background(0);\n        p5.fill(0, 0, 0);\n        let remove_first = false;\n        snowflakes.forEach((snowflake)=>{\n            snowflake.run();\n            if (snowflake.radius > p5.width / 1.5) remove_first = true;\n        });\n        if (remove_first) snowflakes.splice(0, 1);\n        if (p5.frameCount % 200 == 199) snowflakes.push(new (0, $5be6f9265aaa6905$export$2e2bcd8739ae039)(p5, params.Segments));\n    };\n};\nnew (0, (/*@__PURE__*/$parcel$interopDefault($7Pz0b)))($bfd13663790178f8$var$sketch);\n\n\n//# sourceMappingURL=sketch.e4ddbbeb.js.map\n","class Params {\n    Segments = 6;\n}\nexport default Params;\n","import P5 from 'p5';\nimport Params from './params';\nimport Snowflake from './snowflake';\nconst sketch = (p5: P5) => {\n    var is_canvas_infocus = false;\n    let points = [];\n    let rotationAngle = 0;\n    let params = new Params();\n    window.params = params;\n    let snowflakes: [Snowflake];\n    p5.setup = () => {\n        var cnv = p5.createCanvas(p5.windowWidth * 0.9, p5.windowHeight * 0.9);\n        cnv.mouseOver(() => {\n            is_canvas_infocus = true;\n        });\n        cnv.mouseOut(() => {\n            is_canvas_infocus = false;\n        });\n        cnv.style('display', 'block');\n        cnv.parent('sketch-holder');\n        snowflakes = [new Snowflake(p5, params.Segments)];\n    };\n\n    p5.windowResized = () => {\n        p5.resizeCanvas(p5.windowWidth * 0.9, p5.windowHeight * 0.9);\n    };\n\n    p5.draw = () => {\n        p5.background(0);\n        p5.fill(0, 0, 0);\n        let remove_first = false;\n        snowflakes.forEach((snowflake) => {\n            snowflake.run();\n            if (snowflake.radius > p5.width / 1.5) {\n                remove_first = true;\n            }\n        });\n        if (remove_first) {\n            snowflakes.splice(0, 1);\n        }\n        if (p5.frameCount % 200 == 199) {\n            snowflakes.push(new Snowflake(p5, params.Segments));\n        }\n    };\n};\n\nnew P5(sketch);\n","import * as P5 from 'p5';\n\nexport default class Snowflake {\n    p5: P5;\n    num_segments: number;\n    radius: number;\n    seed: number;\n    randomAngle: number;\n    constructor(p5: P5, num_segments: number) {\n        this.p5 = p5;\n        this.num_segments = num_segments;\n        this.radius = 0;\n        this.seed = Math.random() * 1000;\n        this.p5.randomSeed(this.seed);\n        this.randomAngle = this.p5.random(0, this.p5.TWO_PI);\n    }\n\n    run() {\n        this.p5.randomSeed(this.seed);\n        const segmentPoints = this.pointsForSegment(\n            this.num_segments,\n            this.radius\n        );\n        const points = this.snowflakeFromSegment(\n            this.num_segments,\n            segmentPoints\n        );\n        this.drawPoints(points, this.p5.width / 2, this.p5.height / 2);\n        this.radius += 2;\n        this.randomAngle += this.p5.PI / 360;\n    }\n\n    drawPoints(points, x, y) {\n        this.p5.beginShape();\n        this.p5.stroke(\n            255,\n            255,\n            255,\n            this.p5.map(this.radius, 0, this.p5.width / 1.5, 255, 0)\n        );\n        this.p5.strokeWeight(4);\n        for (let i = 0; i < points.length; i++) {\n            const point = points[i];\n            this.p5.vertex(x + point.x, y + point.y);\n        }\n        this.p5.endShape(this.p5.CLOSE);\n    }\n\n    pointsForSegment(numSegments, radius) {\n        const numPointsInSeg = this.p5.int(this.p5.random(4, 10));\n        const segmentPoints = [];\n\n        const segmentAngle = this.p5.PI / numSegments;\n\n        // Generate random points in half of the segment\n        // These are stored in polar coordinates\n        for (let i = 0; i < numPointsInSeg; i++) {\n            const a = this.p5.random(segmentAngle);\n            const r = this.p5.random(0, radius * 2);\n            segmentPoints.push(this.p5.createVector(a, r));\n        }\n\n        // Reflect the points by flipping the angle\n        for (let i = numPointsInSeg - 1; i >= 0; i--) {\n            const point = segmentPoints[i];\n            segmentPoints.push(this.p5.createVector(-point.x, point.y));\n        }\n\n        return segmentPoints;\n    }\n\n    snowflakeFromSegment(numSegments, segmentPoints) {\n        const points = [];\n        for (let i = 0; i < numSegments; i++) {\n            const ang = (i * this.p5.TWO_PI) / numSegments;\n\n            for (let j = 0; j < segmentPoints.length; j++) {\n                const point = segmentPoints[j];\n                const x =\n                    this.p5.cos(point.x + ang + this.randomAngle) * point.y;\n                const y =\n                    this.p5.sin(point.x + ang + this.randomAngle) * point.y;\n\n                points.push(this.p5.createVector(x, y));\n            }\n        }\n\n        return points;\n    }\n}\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","Object","defineProperty","get","$8e0f9bafc82acf47$export$2e2bcd8739ae039","set","s","enumerable","configurable","constructor","Segments","$7Pz0b","$jfXnV","$5be6f9265aaa6905$export$2e2bcd8739ae039","p5","num_segments","radius","seed","Math","random","randomSeed","randomAngle","TWO_PI","run","segmentPoints","pointsForSegment","points","snowflakeFromSegment","drawPoints","width","height","PI","x","y","beginShape","stroke","map","strokeWeight","i","length","point","vertex","endShape","CLOSE","numSegments","numPointsInSeg","int","segmentAngle","a","r","push","createVector","ang","j","cos","sin","__esModule","default","snowflakes","params","window","setup","cnv","createCanvas","windowWidth","windowHeight","mouseOver","mouseOut","style","parent","windowResized","resizeCanvas","draw","background","fill","remove_first","forEach","snowflake","splice","frameCount"],"version":3,"file":"sketch.e4ddbbeb.js.map"}