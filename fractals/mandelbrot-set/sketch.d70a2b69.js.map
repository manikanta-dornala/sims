{"mappings":"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","sources":["<anon>","fractals/mandelbrot-set/params.ts","fractals/mandelbrot-set/sketch.ts"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire5b7a\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire5b7a\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"5owof\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $fbaf245237daa925$export$2e2bcd8739ae039);\nclass $fbaf245237daa925$var$Params {\n    constructor(){\n        this.MaxIterations = 40;\n    }\n}\nvar $fbaf245237daa925$export$2e2bcd8739ae039 = $fbaf245237daa925$var$Params;\n\n});\n\n\nvar $7Pz0b = parcelRequire(\"7Pz0b\");\n\nvar $5owof = parcelRequire(\"5owof\");\nwindow.params = new (0, $5owof.default)();\nfunction $f25472cf2e0ab804$var$sketch(p5) {\n    let centerX = -0.7;\n    let centerY = 0;\n    let gridLength = 1.3;\n    p5.setup = ()=>{\n        p5.createCanvas(Math.floor(p5.windowHeight), Math.floor(p5.windowHeight));\n        $f25472cf2e0ab804$var$draw_set(p5, centerX, centerY);\n    };\n    p5.windowResized = ()=>{\n        p5.resizeCanvas(Math.floor(p5.windowHeight), Math.floor(p5.windowHeight));\n    };\n    const drag = ()=>{\n        if (p5.mouseIsPressed) {\n            // Scale the difference in previous mouse\n            // and current mouse pos by the sideLength\n            let dx = (p5.pmouseX - p5.mouseX) / p5.height * gridLength;\n            let dy = (p5.pmouseY - p5.mouseY) / p5.height * gridLength;\n            // Update the centre pos with the mouse movement\n            centerX += dx;\n            centerY += dy;\n        }\n    };\n    p5.draw = ()=>{\n        $f25472cf2e0ab804$var$draw_set(p5, centerX, centerY, gridLength);\n        drag();\n    };\n    p5.mouseWheel = (event)=>{\n        if (event.delta < 0) // Zoom in\n        gridLength *= 10 / 11;\n        else // Zoom out\n        gridLength *= 1.1;\n        // Make sure we're not getting crazy values\n        gridLength = p5.constrain(gridLength, 0, 3);\n    };\n}\nnew (0, (/*@__PURE__*/$parcel$interopDefault($7Pz0b)))($f25472cf2e0ab804$var$sketch);\nfunction $f25472cf2e0ab804$var$iterate_mandelbrot(a, b) {\n    /*\n        Returns the number of iterations in which the complex number converges\n    */ const curr_a = a;\n    const curr_b = b;\n    let n = 0;\n    while(n < window.params.MaxIterations){\n        let aa = a * a - b * b;\n        let bb = 2 * a * b;\n        a = aa + curr_a;\n        b = bb + curr_b;\n        if (Math.abs(a + b) > 100) break;\n        n++;\n    }\n    return n;\n}\nfunction $f25472cf2e0ab804$var$draw_set(p5, centerX = -0.7, centerY = 0, gridLength = 1.3) {\n    p5.pixelDensity(1);\n    p5.colorMode(p5.HSB);\n    p5.loadPixels();\n    for(let x = 0; x < p5.height; x++)for(let y = 0; y < p5.height; y++){\n        let a = p5.map(x, 0, p5.height, centerX - gridLength, centerX + gridLength);\n        let b = p5.map(y, 0, p5.height, centerY - gridLength, centerY + gridLength);\n        const n = $f25472cf2e0ab804$var$iterate_mandelbrot(a, b);\n        let bright = p5.map(n, 0, window.params.MaxIterations, 0, 255);\n        let saturation = p5.map(n, 0, window.params.MaxIterations, 0, 50);\n        let lum = p5.map(n, 0, window.params.MaxIterations, 0, 255);\n        let pix = (x + y * p5.height) * 4;\n        p5.pixels[pix + 0] = bright;\n        p5.pixels[pix + 1] = saturation;\n        p5.pixels[pix + 2] = lum;\n        p5.pixels[pix + 3] = 255;\n    }\n    p5.updatePixels();\n}\n\n\n//# sourceMappingURL=sketch.d70a2b69.js.map\n","class Params {\n    MaxIterations = 40;\n}\nexport default Params;\n","import P5 from 'p5';\nimport Params from './params';\nwindow.params = new Params();\nfunction sketch(p5: P5) {\n    let centerX = -0.7;\n    let centerY = 0;\n    let gridLength = 1.3;\n    p5.setup = () => {\n        p5.createCanvas(\n            Math.floor(p5.windowHeight),\n            Math.floor(p5.windowHeight)\n        );\n        draw_set(p5, centerX, centerY);\n    };\n    p5.windowResized = () => {\n        p5.resizeCanvas(\n            Math.floor(p5.windowHeight),\n            Math.floor(p5.windowHeight)\n        );\n    };\n    const drag = () => {\n        if (p5.mouseIsPressed) {\n            // Scale the difference in previous mouse\n            // and current mouse pos by the sideLength\n            let dx = ((p5.pmouseX - p5.mouseX) / p5.height) * gridLength;\n            let dy = ((p5.pmouseY - p5.mouseY) / p5.height) * gridLength;\n\n            // Update the centre pos with the mouse movement\n            centerX += dx;\n            centerY += dy;\n        }\n    };\n    p5.draw = () => {\n        draw_set(p5, centerX, centerY, gridLength);\n        drag();\n    };\n    p5.mouseWheel = (event) => {\n        if (event.delta < 0) {\n            // Zoom in\n            gridLength *= 10 / 11;\n        } else {\n            // Zoom out\n            gridLength *= 11 / 10;\n        }\n\n        // Make sure we're not getting crazy values\n        gridLength = p5.constrain(gridLength, 0, 3);\n    };\n}\n\nnew P5(sketch);\n\nfunction iterate_mandelbrot(a: number, b: number): number {\n    /*\n        Returns the number of iterations in which the complex number converges\n    */\n    const curr_a = a;\n    const curr_b = b;\n    let n = 0;\n    while (n < window.params.MaxIterations) {\n        let aa = a * a - b * b;\n        let bb = 2 * a * b;\n        a = aa + curr_a;\n        b = bb + curr_b;\n        if (Math.abs(a + b) > 100) {\n            break;\n            // Its diverging at this point\n        }\n        n++;\n    }\n    return n;\n}\n\nfunction draw_set(p5: P5, centerX = -0.7, centerY = 0, gridLength = 1.3) {\n    p5.pixelDensity(1);\n    p5.colorMode(p5.HSB);\n    p5.loadPixels();\n    for (let x = 0; x < p5.height; x++) {\n        for (let y = 0; y < p5.height; y++) {\n            let a = p5.map(\n                x,\n                0,\n                p5.height,\n                centerX - gridLength,\n                centerX + gridLength\n            );\n            let b = p5.map(\n                y,\n                0,\n                p5.height,\n                centerY - gridLength,\n                centerY + gridLength\n            );\n            const n = iterate_mandelbrot(a, b);\n            let bright = p5.map(n, 0, window.params.MaxIterations, 0, 255);\n            let saturation = p5.map(n, 0, window.params.MaxIterations, 0, 50);\n            let lum = p5.map(n, 0, window.params.MaxIterations, 0, 255);\n\n            let pix = (x + y * p5.height) * 4;\n            p5.pixels[pix + 0] = bright;\n            p5.pixels[pix + 1] = saturation;\n            p5.pixels[pix + 2] = lum;\n            p5.pixels[pix + 3] = 255;\n        }\n    }\n    p5.updatePixels();\n}\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","Object","defineProperty","get","$fbaf245237daa925$export$2e2bcd8739ae039","set","s","enumerable","configurable","constructor","MaxIterations","$7Pz0b","$5owof","$f25472cf2e0ab804$var$draw_set","p5","centerX","centerY","gridLength","pixelDensity","colorMode","HSB","loadPixels","x","height","y","n","$f25472cf2e0ab804$var$iterate_mandelbrot","a","b","curr_a","curr_b","window","params","aa","bb","Math","abs","map","bright","saturation","lum","pix","pixels","updatePixels","default","__esModule","setup","createCanvas","floor","windowHeight","windowResized","resizeCanvas","drag","mouseIsPressed","dx","pmouseX","mouseX","dy","pmouseY","mouseY","draw","mouseWheel","event","delta","constrain"],"version":3,"file":"sketch.d70a2b69.js.map"}